[{"/var/www/html/extensions/friender/extension/v1/src/index.js":"1","/var/www/html/extensions/friender/extension/v1/src/reportWebVitals.js":"2","/var/www/html/extensions/friender/extension/v1/src/App.js":"3","/var/www/html/extensions/friender/extension/v1/src/store/reducers/Auth/authReducer.js":"4","/var/www/html/extensions/friender/extension/v1/src/components/common/logger.js":"5","/var/www/html/extensions/friender/extension/v1/src/components/layouts/AppLayout.js":"6","/var/www/html/extensions/friender/extension/v1/src/store/actions/actionTypes.js":"7","/var/www/html/extensions/friender/extension/v1/src/routes/AppRoute.js":"8","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/ForgotPassword.js":"9","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/NotFound.js":"10","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/logout.js":"11","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/Login.js":"12","/var/www/html/extensions/friender/extension/v1/src/components/modules/Main/Dashboard.js":"13","/var/www/html/extensions/friender/extension/v1/src/components/modules/DelaySetting/setting.js":"14","/var/www/html/extensions/friender/extension/v1/src/components/modules/Setting/Setting.js":"15","/var/www/html/extensions/friender/extension/v1/src/components/modules/AutoResponder/autoResponderEdit.js":"16","/var/www/html/extensions/friender/extension/v1/src/components/modules/AutoResponder/autoResponderCreate.js":"17","/var/www/html/extensions/friender/extension/v1/src/components/modules/AutoResponder/autoResponder.js":"18","/var/www/html/extensions/friender/extension/v1/src/config.js":"19","/var/www/html/extensions/friender/extension/v1/src/services/setting.js":"20","/var/www/html/extensions/friender/extension/v1/src/services/autoResponderServices.js":"21","/var/www/html/extensions/friender/extension/v1/src/services/authService.js":"22","/var/www/html/extensions/friender/extension/v1/src/helper/loginHelper.js":"23","/var/www/html/extensions/friender/extension/v1/src/helper/helper.js":"24","/var/www/html/extensions/friender/extension/v1/src/helper/generateDeviceID.js":"25","/var/www/html/extensions/friender/extension/v1/src/components/modules/Common/footer.js":"26","/var/www/html/extensions/friender/extension/v1/src/components/modules/Common/sidebar.js":"27","/var/www/html/extensions/friender/extension/v1/src/store/actions/Auth/authAction.js":"28","/var/www/html/extensions/friender/extension/v1/src/services/friendService.js":"29","/var/www/html/extensions/friender/extension/v1/src/helper/profileHelper.js":"30","/var/www/html/extensions/friender/extension/v1/src/components/modules/Common/header.js":"31","/var/www/html/extensions/friender/extension/v1/src/services/delaysettingServices.js":"32"},{"size":1204,"mtime":1650369545960,"results":"33","hashOfConfig":"34"},{"size":362,"mtime":1650369545960,"results":"35","hashOfConfig":"34"},{"size":338,"mtime":1650369545920,"results":"36","hashOfConfig":"34"},{"size":551,"mtime":1650369545960,"results":"37","hashOfConfig":"34"},{"size":215,"mtime":1650369545924,"results":"38","hashOfConfig":"34"},{"size":316,"mtime":1650369545924,"results":"39","hashOfConfig":"34"},{"size":51,"mtime":1650369545960,"results":"40","hashOfConfig":"34"},{"size":2162,"mtime":1650369545960,"results":"41","hashOfConfig":"34"},{"size":7840,"mtime":1650369545924,"results":"42","hashOfConfig":"34"},{"size":277,"mtime":1650369545924,"results":"43","hashOfConfig":"34"},{"size":2471,"mtime":1650369545924,"results":"44","hashOfConfig":"34"},{"size":11151,"mtime":1650369545924,"results":"45","hashOfConfig":"34"},{"size":6949,"mtime":1650369545928,"results":"46","hashOfConfig":"34"},{"size":7291,"mtime":1650369545928,"results":"47","hashOfConfig":"34"},{"size":13319,"mtime":1650369545928,"results":"48","hashOfConfig":"34"},{"size":9460,"mtime":1650369545928,"results":"49","hashOfConfig":"34"},{"size":7927,"mtime":1650369545928,"results":"50","hashOfConfig":"34"},{"size":8584,"mtime":1650369545928,"results":"51","hashOfConfig":"34"},{"size":271,"mtime":1650620279315,"results":"52","hashOfConfig":"34"},{"size":3439,"mtime":1650369545960,"results":"53","hashOfConfig":"34"},{"size":4120,"mtime":1650369545960,"results":"54","hashOfConfig":"34"},{"size":7374,"mtime":1650369545960,"results":"55","hashOfConfig":"34"},{"size":4164,"mtime":1650369545928,"results":"56","hashOfConfig":"34"},{"size":10538,"mtime":1650618563196,"results":"57","hashOfConfig":"34"},{"size":436,"mtime":1650369545928,"results":"58","hashOfConfig":"34"},{"size":2243,"mtime":1650369545928,"results":"59","hashOfConfig":"34"},{"size":5132,"mtime":1650369545928,"results":"60","hashOfConfig":"34"},{"size":184,"mtime":1650369545960,"results":"61","hashOfConfig":"34"},{"size":11134,"mtime":1650369545960,"results":"62","hashOfConfig":"34"},{"size":2206,"mtime":1650369545928,"results":"63","hashOfConfig":"34"},{"size":10411,"mtime":1650369545928,"results":"64","hashOfConfig":"34"},{"size":2127,"mtime":1650369545960,"results":"65","hashOfConfig":"34"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1lvlpwh",{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":2,"source":"101"},{"filePath":"102","messages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151"},"/var/www/html/extensions/friender/extension/v1/src/index.js",[],"/var/www/html/extensions/friender/extension/v1/src/reportWebVitals.js",[],"/var/www/html/extensions/friender/extension/v1/src/App.js",[],"/var/www/html/extensions/friender/extension/v1/src/store/reducers/Auth/authReducer.js",[],"/var/www/html/extensions/friender/extension/v1/src/components/common/logger.js",[],"/var/www/html/extensions/friender/extension/v1/src/components/layouts/AppLayout.js",["152"],"import React from \"react\";\nimport logger from \"../common/logger\";\nimport AppRoutes from \"../../routes/AppRoute\";\nimport \"./applayout.css\";\n\nconst AppLayout = () => {\n  // logger.info(\"*** AppLayout ***\");\n  return (\n    <div className=\"App-wrapper\">\n      <AppRoutes />\n    </div>\n  );\n};\n\nexport default AppLayout;\n","/var/www/html/extensions/friender/extension/v1/src/store/actions/actionTypes.js",[],"/var/www/html/extensions/friender/extension/v1/src/routes/AppRoute.js",["153"],"import React, { lazy, Suspense } from \"react\";\nimport { Route, Switch, withRouter } from \"react-router-dom\";\nimport log from \"../components/common/logger\";\nimport { Container } from \"reactstrap\";\nimport classNames from \"classnames\";\n\n\n\nconst Login = lazy(() => import(\"../components/modules/Auth/Login\"));\nconst ForgotPassword = lazy(() => import(\"../components/modules/Auth/ForgotPassword\"));\nconst NotFound = lazy(() => import(\"../components/modules/Auth/NotFound\"));\nconst Dashboard = lazy(() => import(\"../components/modules/Main/Dashboard\"));\nconst Setting = lazy(() => import(\"../components/modules/Setting/Setting\"));\nconst DelaySetting = lazy(() => import(\"../components/modules/DelaySetting/setting\"));\nconst AutoResponder = lazy(() => import(\"../components/modules/AutoResponder/autoResponder\"));\nconst AutoResponderCreate = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderCreate\"))\nconst AutoResponderEdit = lazy(() =>  import(\"../components/modules/AutoResponder/autoResponderEdit\"));\n\nconst Logout  = lazy(() =>  import(\"../components/modules/Auth/logout\"));\nconst AppRoute = ({ sidebarIsOpen, toggleSidebar }) => {\n  log.info(\"**** AppRoute ****\");\n\n  return (\n    <Suspense fallback={<div />}>\n      <Container\n        fluid\n        className={classNames(\"content\", { \"is-open\": sidebarIsOpen })}\n      >\n        {/* <Topbar toggleSidebar={toggleSidebar} /> */}\n        <Switch>\n        <Route exact path=\"/\" test=\"abc\" component={Login} />\n        <Route  exact  path=\"/dashboard\" component={Dashboard} />\n        <Route  exact  path=\"/setting\" component={Setting} />\n        <Route  exact  path=\"/delay_setting\" component={DelaySetting} />\n        <Route  exact  path=\"/autoresponder\" component={AutoResponder} />\n        <Route  exact  path=\"/autorespondercreate\" component={AutoResponderCreate} />\n        <Route  exact  path=\"/autoresponderedit/:idfy\"  component={AutoResponderEdit} />\n        <Route  exact  path=\"/forgetPassword\" component={ForgotPassword} />\n        <Route  exact  path=\"/logout\"  component={Logout} />\n        </Switch>\n      </Container>\n    </Suspense>\n  );\n};\nexport default withRouter(AppRoute);\n","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/ForgotPassword.js",["154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176"],"import React, { Component} from \"react\";\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {kyubiExtensionId}  from \"../../../config\";\nimport \"./login.css\";\nimport AuthServices from \"../../../services/authService\";\nimport loginHelper from \"../../../helper/loginHelper\";\nimport  {OpenPoweredBy,OpenTier5Partnership,OpenFacebookLink,OpenMessengerLink,OpenSignupLink} from  '../../../helper/helper';\nimport logo from \"../../../images/logo1.svg\";\nimport biglogo from \"../../../images/biglogo.svg\";\nimport LoaderLogo from \"../../../images/Loader.gif\"\nimport mail from \"../../../images/mail.svg\";\nimport lock from \"../../../images/lock.svg\";\nimport messanger from \"../../../images/Messanger.svg\";\nimport path from \"../../../images/Path3.svg\";\nimport * as authAction from '../../../store/actions/Auth/authAction';\nimport Footer from \"../Common/footer\";\nclass ForgotPassword extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      email:\"\",\n      loader:false,\n      error:false,\n      errorMessage:\"\",\n      loadingstatus:false,\n      ActionMessage:false,\n      ActionMessageHead:\"\",\n      ActionMessagetext:\"\"\n    }\n    \n\n  }\n    /**\n    * @inputChangeHandller \n    * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    /**\n    * @handleFormValidation \n    * email field blank validation\n    */\n    handleFormValidation() {\n          let fields = {\n          email: this.state.email\n          };\n          \n          let formIsValid = true;\n          let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n          let checkResult = emailRegex.test(String(this.state.email).toLowerCase());\n          if (!fields[\"email\"]) {\n          formIsValid = false;\n          this.setState({errorMessage:\"Email Is Required\"});\n          return formIsValid;\n          } else if (checkResult === false) {\n          formIsValid = false;\n          this.setState({errorMessage:\"Please enter a proper email\"});\n          return formIsValid;\n          }\n          else{\n              formIsValid = true;\n              return formIsValid;\n          }\n          \n          return formIsValid;\n    }\n\n    /**\n    * @forgetPasswordHandler \n    * in this function we are checking the email id\n    * and if the details are correct then Ask kyubi Tofenerate Reset Password Link\n    */\n    forgetPasswordHandler = async (event) => {\n            event.preventDefault();\n            \n            this.setState({ loader: true });\n            let payload = {\n            email: this.state.email\n            }\n            if (this.handleFormValidation()) {\n                this.setState({ error:false});\n                this.setState({errorMessage:\"\"});\n                let payload  ={\n                  extId: process.kyubi.extId,\n                  email: this.state.email\n                }\n                await AuthServices.forgotPassword(payload).then(async result=>{\n                   if(result.data.code  === 1){\n                      this.setState({ loader: false,\n                        ActionMessage:true,\n                        ActionMessageHead:\"Success\",\n                        ActionMessagetext:result.data.message\n                      });\n                    }else{\n                        this.setState({ loader: false,\n                          ActionMessage:true,\n                          ActionMessageHead:\"Error !!\",\n                          ActionMessagetext:\"Sorry Cannot  Process Your Request, Please Provide a Registered Email ID Or Try Again After Sometime\"\n                        });\n                    }\n                    \n    \n                }).catch(error=>{\n                  this.setState({ \n                    loader: false,\n                    ActionMessage:true,\n                    ActionMessageHead:\"Error !!\",\n                    ActionMessagetext:\"Sorry Cannot  Process Your Request, Please Provide a Registered Email ID Or Try After Sometime\"\n                   });\n                });\n                \n    \n    \n            }else{\n              this.setState({ loader: false,\n                error:true,\n                errorMessage:\"Please Provide Proper Email ID !!\"\n               });\n              \n    \n            }\n            //this.setState({ loader: false });\n        }\n        ActionMessageClose(event){\n          event.preventDefault();\n          this.props.history.push('/');\n          this.setState({\n            email:\"\",\n            loader:false,\n            error:false,\n            errorMessage:\"\",\n            loadingstatus:false,\n            ActionMessage:false,\n            ActionMessageHead:\"\",\n            ActionMessagetext:\"\"\n          })\n      }\n    render() {\n        return (\n          <>\n                {this.state.loader && (   \n                <div class=\"after_login_refresh\"><img src={process.kyubi.loader.preLoader} alt=\"\"/></div>\n                )}\n                <div className=\"loginscreen\">\n                  { this.state.ActionMessage  && ( \n                      <div class=\"group_delete_sreen\">\n                          <div className=\"group_delete_popup\">\n                            <h3>{this.state.ActionMessageHead}</h3>\n                            <p>{this.state.ActionMessagetext}</p>\n                            <div className=\"text-right\">\n                              <a href=\"#\" onClick={(event) => this.ActionMessageClose(event)} className=\"redlink\">Close</a>\n                            </div>\n                          </div>\n                      </div>\n                  )} \n                  <div className=\"graphics1\"></div>\n                  <div className=\"graphics2\"></div>\n                  <div className=\"logo\"><img src={process.kyubi.logo.secondary_logo} /></div>\n                  <div className=\"login_container\">\n                      <div className=\"login_welcome_block\">\n                      Forgot Password?\n                        <h3 className=\"forgetpasswordtext\">Submit your registered email to get the link to reset your account password.</h3>\n                      </div>\n                      <div className=\"login_block\">\n                              <form>\n                                  <label>\n                                      <span><img src={mail}/></span>\n                                      <input \n                                      name=\"email\"\n                                      id=\"email\"\n                                      type=\"email\"\n                                      placeholder=\"Email Address\"\n                                      onChange={this.inputChangeHandller}\n                                      />\n                                  </label>\n                                  \n                                  <div className=\"text-right gap1\">\n                                      \n                                      Click here to <NavLink className=\"link\" to=\"/\">LogIn</NavLink>\n                                  </div>\n                                  <button type=\"button\" className=\"blue_btn\" onClick={this.forgetPasswordHandler} >Submit</button>\n                                  \n                                  {this.state.error && (   \n                                      <div className=\"error\"> {this.state.errorMessage} *</div>\n                                  )}\n                              </form>\n                      </div>  \n                      <div className=\"footer\">\n                          <Footer></Footer>\n                      </div>\n                  </div>\n                </div>\n          </>\n          \n        );\n    }\n}\nexport default ForgotPassword;","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/NotFound.js",["177","178"],"import React, { Component } from 'react';\nimport { Redirect, withRouter } from 'react-router-dom'\n\nclass NotFound extends Component {\n    render() {\n        return (\n          <div className=\"\">\n          Hello Login\n          </div>\n        );\n    }\n}\nexport default NotFound;","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/logout.js",["179","180","181","182"],"import React, { Component} from \"react\";\nimport { Redirect, withRouter } from 'react-router-dom';\nimport loginHelper from \"../../../helper/loginHelper\";\nimport {kyubiExtensionId}  from \"../../../config\";\nimport \"./login.css\";\n\nclass logout extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          \n        }\n        \n\n      }\n      componentDidMount(){\n        const gfs = chrome.storage.local;\n        \n        gfs.remove(['fb_id']);\n        gfs.remove(['token']);\n        gfs.remove(['keywordsTally']);\n        gfs.remove(['inBackgroundFetching']);\n        gfs.remove(['fb_image']);\n        gfs.remove(['fb_logged_id']);\n        gfs.remove(['fb_name']);\n        gfs.remove(['fb_username']);\n        gfs.remove(['autoresponder']);\n        gfs.remove(['kyubi_user_token']);\n        gfs.remove(['user_id']);\n        gfs.remove(['default_message_text']);\n        gfs.remove(['fb_username']);\n        gfs.remove(['default_time_delay']);\n        gfs.remove(['default_message']);\n        gfs.remove(['individualThreadList']);\n       \n        gfs.remove(['profileFetch']);\n        gfs.remove(['messageListFetch']);\n        gfs.remove(['individualMessageFetch']);\n        let LO = loginHelper.logout();\n        gfs.remove(['fbthread']);\n        gfs.remove(['fbmunread']);\n        gfs.remove(['fbprofile']);\n        this.props.history.push('/');\n         \n      }\n    render() {\n        return (\n\n          <div className=\"wrapper\">\n            \n            \n\n            <div className=\"content-wrapper\">\n              <section className=\"content-header\">\n                <div className=\"container-fluid\">\n                  <div className=\"row mb-12\">\n                    <div className=\"col-sm-6\">\n                      \n                    </div>\n                  </div>\n                </div>\n              </section>\n              <section className=\"content\">\n                <div className=\"container-fluid\">\n                  <div className=\"row\">\n                    <div className=\"col-md-12\">\n                    <div class=\"alert alert-danger alert-dismissible\">\n                  \n                  <h5><i class=\"icon fas fa-ban\"></i> Alert!</h5>\n                  Thanks For Being With Us We are Loging You Out\n                </div>\n                    </div>\n                  </div>\n                </div>\n              </section>\n            </div>\n          </div>\n          \n        );\n    }\n}\nexport default logout;","/var/www/html/extensions/friender/extension/v1/src/components/modules/Auth/Login.js",["183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201"],"import React, { Component} from \"react\";\nimport { NavLink, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport {kyubiExtensionId}  from \"../../../config\";\nimport \"./login.css\";\nimport AuthServices from \"../../../services/authService\";\nimport loginHelper from \"../../../helper/loginHelper\";\nimport  {OpenPoweredBy,OpenTier5Partnership,OpenFacebookLink,OpenMessengerLink,OpenSignupLink, GetData} from  '../../../helper/helper';\nimport logo from \"../../../images/logo1.svg\";\nimport biglogo from \"../../../images/biglogo.svg\";\nimport LoaderLogo from \"../../../images/Loader.gif\"\nimport mail from \"../../../images/mail.svg\";\nimport lock from \"../../../images/lock.svg\";\nimport messanger from \"../../../images/Messanger.svg\";\nimport path from \"../../../images/Path3.svg\";\nimport * as authAction from '../../../store/actions/Auth/authAction';\nimport getDeviceId from \"../../../helper/generateDeviceID\";\nimport Footer from \"../Common/footer\"\nclass Login extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          email:\"\",\n          password:\"\",\n          loader:false,\n          error:false,\n          errorMessage:\"\",\n          loadingstatus:false,\n          confirmationVal:false\n        }\n        \n\n      }\n    /**\n    * @inputChangeHandller \n    * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    /**\n    * @checkBackgroundFetching \n    * Check  Wether Background Fetching is  done or not\n    */\n    checkBackgroundFetching() {\n            // setInterval(() => {\n            //     let inBackgroundFetching=localStorage.getItem('inBackgroundFetching');\n            //     // console.log(\"This check ++++++++++\",inBackgroundFetching);\n            //     if(inBackgroundFetching !== \"true\"){\n            //         // console.log(\"This check 111++++++++++\",inBackgroundFetching);\n            //         this.props.history.push('/dashboard');       \n                               \n            //     }\n            // },2000);\n        }\n    /**\n    * @handleLoginFormValidation \n    * email and password field blank validation\n    */\n    handleLoginFormValidation() {\n        let fields = {\n        email: this.state.email,\n        password: this.state.password,\n        };\n        \n        let formIsValid = true;\n        let emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        let checkResult = emailRegex.test(String(this.state.email).toLowerCase());\n        if (!fields[\"email\"]) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Email Is Required\"});\n        return formIsValid;\n        } else if (checkResult === false) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Please enter a proper email\"});\n        return formIsValid;\n        }\n        else if (!fields[\"password\"]) {\n        formIsValid = false;\n        this.setState({errorMessage:\"Password Is Required\"});\n        return formIsValid;\n        }else{\n            formIsValid = true;\n            return formIsValid;\n        }\n        \n        return formIsValid;\n    }\n     /**\n    * @loginHandler \n    * in this function we are checking the email id, password\n    * and if the details are correct then login them and also take care about the remember password one\n    */\n    loginHandler = async (event) => {\n        event.preventDefault();\n        const gfs = chrome.storage.local;\n        \n        this.setState({ loader: true });\n        let payload = {\n        email: this.state.email,\n        password: this.state.password,\n        }\n        if (this.handleLoginFormValidation()) {\n            this.setState({ error:false});\n            this.setState({errorMessage:\"\"});\n            // let subscription = await GetData('subscription');\n                let payload  ={\n                    extensionId: process.kyubi.extId,\n                    email: this.state.email,\n                    password: this.state.password,\n                    deviceId: getDeviceId(),\n                    confirmLogout: this.state.confirmationVal,\n                    // subscription: subscription ? subscription : null\n                }\n                // console.log(\"subscription : \", subscription);\n                // console.log(\"payload : \", payload);\n            await AuthServices.login(payload).then(async result=>{\n                if(result.data.code  === 1){\n                    console.log(\"result : \", result);\n                    let token = result.data.token;\n                    let tokens = token.split(\".\");\n                    tokens =atob(tokens[1]);\n                    let myObj = JSON.parse(tokens);\n                     console.log(\"Tis Is my Obj\",myObj)\n                    //this.props.setProfileInfo(myObj);\n                    // console.log(\"Tis Is my Obj11\",this.props.ProfileInfo.profileInfo)\n                    gfs.set({'kyubi_user_token': myObj.user.id});\n                    gfs.set({'kyubi_email': myObj.user.email});\n                    \n                    let UserPayload = {\n                        kyubi_user_token:myObj.user.id,\n                        user_email:myObj.user.email,\n                        plan:result.data.plan,\n                        status:result.data.status\n\n                    }\n                    await AuthServices.GetOrStoreUser(UserPayload).then(async result=>{\n                        console.log(result);\n                        this.setState({ loader: false });\n                        gfs.set({'user_id': result.data.payload._id});\n                        gfs.set({'kyubi_plan': result.data.payload.plan});\n                        gfs.set({'kyubi_profile_count': result.data.payload.profile_count});\n                        gfs.set({'kyubi_profile_status': result.data.payload.status});\n                        this.props.history.push('/dashboard');\n                    }).catch(error=>{\n                        // console.log(error);\n                        this.setState({ loader: false });\n                        this.setState({errorMessage:\"User not found or In-Active\"});\n                        this.setState({ error:true});\n                    });\n                    console.log(\"Let Me Get The Data\",UserPayload);\n                    //this.props.history.push('/dashboard');\n                    \n                }else{\n                    this.setState({ loader: false });\n                    this.setState({errorMessage:\"User not found or In-Active\"});\n                    this.setState({ error:true});\n                }\n                \n\n            }).catch(error=>{\n                // console.log(error);\n                this.setState({ loader: false });\n                this.setState({errorMessage:\"User not found or In-Active\"});\n                this.setState({ error:true});\n            });\n            \n\n\n        }else{\n            this.setState({ error:true,loader: false});\n\n        }\n        //this.setState({ loader: false });\n    }\n\n    callFrameHandler    =   async   (event) =>{\n        loginHelper.framecaller();\n    }\n    \n    async componentDidMount(){\n        this.setState({ loader: true });\n        let kyubi_user_token = await GetData('kyubi_user_token');\n        \n        if(kyubi_user_token){\n            \n                this.props.history.push('/dashboard');\n\n            \n        }else{\n            this.setState({ loader: false });\n        }\n        \n    }\n\n    render() {\n        \n        return (\n            <div>\n                {this.state.loader && (   \n                <div class=\"after_login_refresh\"><img src={process.kyubi.loader.preLoader} alt=\"\"/></div>\n                )}\n                <div className=\"loginscreen\" style={{\n                                backgroundImage: (process.kyubi.logo.background_image ? `url(${process.kyubi.logo.background_image})` : '')\n                            }}>\n                    {!process.kyubi.logo.background_image && \n                        <><div className=\"graphics1\"></div><div className=\"graphics2\"></div></>\n                    }\n                    <div className=\"logo\"><img src={process.kyubi.logo.secondary_logo} /></div>\n                    <div className=\"login_container\">\n                        <div className=\"login_welcome_block\">\n                            Welcome,\n                            <h3>Login to continue!</h3>\n                        </div>\n                        <div className=\"login_block\">\n                                <form>\n                                    <label>\n                                        <span><img src={mail}/></span>\n                                        <input \n                                        name=\"email\"\n                                        id=\"email\"\n                                        type=\"email\"\n                                        placeholder=\"Email Address\"\n                                        onChange={this.inputChangeHandller}\n                                        />\n                                    </label>\n                                    <label>\n                                        <span><img src={lock} /></span>\n                                        <input \n                                            type=\"password\" \n                                            placeholder=\"**********\"\n                                            name=\"password\"\n                                            id=\"password\"\n                                            onChange={this.inputChangeHandller}\n                                        />\n                                    </label>\n                                    <div className=\"text-right gap1\">\n                                        <NavLink className=\"link\" to=\"/forgetPassword\">Forgot Password?</NavLink>\n                                    </div>\n                                    <button type=\"button\" className=\"blue_btn\" onClick={this.loginHandler} >LOGIN</button>\n                                    <div  className=\"login_signup\">Don’t have an account? <a onClick={(event) => this.LinkHandler(\"optOne\",event)} href=\"#\">Sign up</a></div>\n                                    {this.state.error && (   \n                                        <div className=\"error\"> {this.state.errorMessage} *</div>\n                                    )}\n                                </form>\n                        </div>  \n                        <Footer></Footer>\n                        \n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n}\n\n\n/**\n * @mapStateToProps\n * grab the values from redux store\n */\n const mapStateToProps = state => {\n    return {\n      ProfileInfo: state.auth.payload\n    };\n  };\n/**\n* @mapDispatchToProps \n* sending the values to redux store\n*/\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        setProfileInfo: (load) => dispatch(authAction.addProfileInfo(load))\n    }\n  }\n  export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Login))","/var/www/html/extensions/friender/extension/v1/src/components/modules/Main/Dashboard.js",["202","203","204","205","206","207"],"import React, { Component } from 'react';\nimport { Redirect, withRouter } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport {  GetData,OpenPortalInTab } from '../../../helper/helper'\nimport Header from \"../Common/header\";\nimport Footer from \"../Common/footer\";\nimport biglogo from \"../../../images/128X128.png\";\nimport RefreshLogo from \"../../../images/layer1.svg\";\nimport FaceBookLogo from \"../../../images/fb_blue.svg\";\nimport IconLogo from \"../../../images/icon.svg\";\nimport LoaderLogo from \"../../../images/Loader.gif\";\nimport * as authAction from '../../../store/actions/Auth/authAction';\nimport RocketLaunchIcon from '@mui/icons-material/RocketLaunch';\nimport Button from '@mui/material/Button';\nlet port = chrome.runtime.connect({name: \"time to send message\"});\n\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      biglogo: biglogo,\n      fb_name: \"XXXXX\",\n      fb_username: \"\",\n      fb_id: \"\",\n      fb_logged_id: \"\",\n      autoresponder: \"0\",\n      default_message: \"0\",\n      loader: false,\n      is_user_logged_in_facebook: \"false\",\n      headerText:\"Hi Friend !!!\"\n    }\n  }\n\n  componentDidMount = async () => {\n    let array = [\"Friendship is the hardest thing in the world to explain. It’s not something you learn in school. But if you haven’t learned the meaning of friendship, you really haven’t learned anything. — Muhammad Ali\"\n    ,\"Don’t make friends who are comfortable to be with. Make friends who will force you to lever yourself up. — Thomas J. Watson\"\n    ,\"The most beautiful discovery true friends make is that they can grow separately without growing apart. — Elisabeth Foley\"\n    ,\"Each friend represents a world in us, a world possibly not born until they arrive, and it is only by this meeting that a new world is born. — Anais Nin\"\n    ,\"Life is partly what we make it, and partly what it is made by the friends we choose. — Tennessee Williams\"\n    ,\"They may forget what you said, but they will never forget how you made them feel. — Carl W. Buechner\"\n    ,\"Find a group of people who challenge and inspire you; spend a lot of time with them, and it will change your life. — Amy Poehler\"\n    ,\"For beautiful eyes, look for the good in others; for beautiful lips, speak only words of kindness; and for poise, walk with the knowledge that you are never alone. — Audrey Hepburn\"\n    ,\"The best and most beautiful things in the world cannot be seen or even touched — they must be felt with the heart. — Helen Keller\"\n    ,\"Happiness can be found even in the darkest of times, if one only remembers to turn on the light. — Dumbledore\"\n    ,\"A real friend is one who walks in when the rest of the world walks out. — Walter Winchell\"\n    ,\"A friend is someone who understands your past, believes in your future, and accepts you just the way you are. — Unknown\"\n    ,\"Growing apart doesn’t change the fact that for a long time we grew side by side; our roots will always be tangled. I’m glad for that. — Ally Condie\"\n    ,\"Let us be grateful to the people who make us happy; they are the charming gardeners who make our souls blossom. — Marcel Proust\"\n    ,\"Lots of people want to ride with you in the limo, but what you want is someone who will take the bus with you when the limo breaks down. — Oprah Winfrey\"\n    ,\"In the sweetness of friendship let there be laughter, for in the dew of little things the heart finds its morning and is refreshed. — Khalil Gibran\"\n    ,\"It’s not what we have in life, but who we have in our life that matters. — Unknown\"\n    ,\"To the world you may be just one person, but to one person you may be the world. — Dr. Seuss\"\n    ,\"A friend is one who overlooks your broken fence and admires the flowers in your garden. — Unknown\"\n    ,\"A friend who understands your tears is much more valuable than a lot of friends who only know your smile. — Unknown\"\n    ,\"We weren’t sisters [or brothers] by birth, but we knew from the start…fate brought us together to be sisters [or brothers] by heart. — Unknown\"\n    ,\"A friend is one of the best things you can be and the greatest things you can have. — Sarah Valdez\"\n    ,\"Best friends are the people in your life who make you laugh louder, smile brighter and live better. — Unknown\"\n    ,\"Time doesn’t take away from friendship, nor does separation. — Tennessee Williams\"\n    ,\"When the world is so complicated, the simple gift of friendship is within all of our hands. — Maria Shriver\"],\n    intervalDurationMs = 5000,\n    currentIndex = 0,\n    maxNumTimes = -1,\n    numTimesRan = 0;\n    let interval = setInterval(function() {\n      if (maxNumTimes !== 0) {\n          this.setState({\n              headerText: array[currentIndex]\n          });\n          currentIndex++;\n          if (currentIndex > array.length-1) {\n              if (maxNumTimes === -1) {\n                  currentIndex = 0;\n              } else {\n                  numTimesRan++;\n                  if (numTimesRan === maxNumTimes) {\n                      clearInterval(interval);\n                  } else {\n                      currentIndex = 0;\n                  }\n              }\n          }\n      } else {\n          clearInterval(interval);\n      }\n  }.bind(this), intervalDurationMs);\n  }\n  fbHandler = async (event) => {\n    event.preventDefault();\n    \n    let kyubi_user_token = await GetData('kyubi_user_token');\n    if(kyubi_user_token){\n      console.log(\"You Are Loged in ksjhdfgbkjhtdfg\", kyubi_user_token);\n      OpenPortalInTab();\n    }\n     \n  }\n  render() {\n    return (\n      <div>\n        {this.state.loader && (\n          <div className=\"after_login_refresh\"><img src={process.kyubi.loader.preLoader} alt=\"\" /></div>\n        )}\n        <div className=\"dashboard\">\n          <Header selectedtab=\"dashboard\"></Header>\n\n          <div className=\"after_log_profile\">\n            <img src={this.state.biglogo} alt=\"\" />\n            <p><h3>Welcome to Friender, Friend !!!</h3></p>\n            \n          </div>\n          <div className=\"fb_login_request\">\n            \n         \n              <div className=\"login_caution\">\n                \n                {this.state.headerText}\n                \n                </div>\n                <Button variant=\"outlined\" size=\"large\" onClick={this.fbHandler} startIcon={<RocketLaunchIcon />}>\n                Portal\n                </Button>\n           \n          </div>\n          <Footer></Footer>\n        </div>\n      </div>\n    );\n  }\n}\n/**\n * @mapStateToProps\n * grab the values from redux store\n */\nconst mapStateToProps = state => {\n  return {\n    ProfileInfo: state.auth.payload\n  };\n};\n/**\n* @mapDispatchToProps \n* sending the values to redux store\n*/\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setProfileInfo: (load) => dispatch(authAction.addProfileInfo(load))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Dashboard));","/var/www/html/extensions/friender/extension/v1/src/components/modules/DelaySetting/setting.js",["208","209","210","211","212","213","214","215","216"],"import React, { Component } from \"react\";\nimport Header from \"../Common/header\";\nimport Footer from \"../Common/footer\";\nimport delaysettingService from \"../../../services/delaysettingServices\";\nimport { GetData } from \"../../../helper/helper\"\nclass setting extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            responseSetting:1,\n            messageSetting:0,\n            loader:false,\n            delay_hrs:null,\n            delay_minute:null,\n            delay_status:false\n        }\n      }\n    /**\n    * @inputChangeHandller \n    * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        // console.log(event.target);\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    autoSetting = async (event) => {\n        if(this.state.delay_status === false){\n            this.setState({delay_status:true})\n        }else{\n            this.setState({delay_status:false})\n        }\n    }\n    submitAddDefaultMessage  =    async   (event) =>  {\n        const gfs = chrome.storage.local;\n        this.setState({loader:true});\n        event.preventDefault();\n        let user_id = await GetData('user_id');;\n        \n        let payload =   {\n            delay_hrs:this.state.delay_hrs,\n            delay_minute:this.state.delay_minute,\n            delay_status:this.state.delay_status,\n            user_id: user_id\n        }\n        \n        delaysettingService.setSetting(payload).then(result=>{\n            // console.log(\"This I got From backGround SUSSSSS\",result);\n            if(result.data.code==1){\n                let responsenewvalue =result.data.payload;\n                if(responsenewvalue.delay_setting == 1){\n                    this.setState({delay_status:true});\n                }else{\n                    this.setState({delay_status:false});\n                }\n                let toatlminutes=parseInt(responsenewvalue.delay_time);\n                if(toatlminutes<60){\n                    this.setState({\n                        loader:false,\n                        delay_hrs:0,\n                        delay_minute:toatlminutes\n                    });\n                }else{\n                    let constmin =60;\n                    let hrs = Math. floor(toatlminutes/constmin);\n                    let mins = toatlminutes%constmin;\n                    // console.log(\"Total Hrs =\",hrs);\n                    // console.log(\"Total Mins =\",mins);\n                    this.setState({\n                        loader:false,\n                        delay_hrs:hrs,\n                        delay_minute:mins\n                    });\n                }\n                \n\n            }else{\n                this.setState({\n                    loader:false,\n                    delay_hrs:null,\n                    delay_minute:null,\n                    delay_status:false\n                })  \n\n            }\n        }).catch(error=>{\n            // console.log(\"This I got From backGround EROOOOOO\",error);\n        })\n        // console.log(\"This Inf I have to Send\",payload);\n    }\n      componentDidMount = async () => {\n          this.setState({loader:true})\n          let params ={\n            user_id    :   await GetData('user_id')\n          };\n          delaysettingService.getSetting(params).then(result=>{\n            // console.log(\"This I got From backGround SUSSSSS\",result);\n            if(result.data.code==1){\n                let responsenewvalue =result.data.payload;\n                if(responsenewvalue.delay_setting == 1){\n                    this.setState({delay_status:true});\n                }else{\n                    this.setState({delay_status:false});\n                }\n                let toatlminutes=parseInt(responsenewvalue.delay_time);\n                if(toatlminutes<60){\n                    this.setState({\n                        loader:false,\n                        delay_hrs:0,\n                        delay_minute:toatlminutes\n                    });\n                }else{\n                    let constmin =60;\n                    let hrs = Math. floor(toatlminutes/constmin);\n                    let mins = toatlminutes%constmin;\n                    // console.log(\"Total Hrs =\",hrs);\n                    // console.log(\"Total Mins =\",mins);\n                    this.setState({\n                        loader:false,\n                        delay_hrs:hrs,\n                        delay_minute:mins\n                    });\n                }\n                \n\n            }else{\n                this.setState({\n                    loader:false,\n                    delay_hrs:null,\n                    delay_minute:null,\n                    delay_status:false\n                })  \n\n            }\n        }).catch(error=>{\n            // console.log(\"This I got From backGround EROOOOOO\",error);\n          })\n        \n        }\n      render() {\n        return (\n            <div>\n                {this.state.loader && (   \n                    <div className=\"after_login_refresh\"><img src={process.kyubi.loader.preLoader} alt=\"\"/></div>\n                )}\n                <div className=\"dashboard\">\n                <Header selectedtab=\"setting\"></Header>\n                <div class=\"toggleSettings\">\n                    <p>\n                        Delay AutoResponder Response\n                        <span class=\"toggler\">\n                            <label class=\"switch_box box_1\">\n                            {this.state.delay_status === false ?\n                            <input type=\"checkbox\" \n                            className=\"switch_1\" \n                            name=\"delay_status\" \n                            onChange={this.autoSetting} \n                            id=\"swich\" \n                            name=\"togg\"\n                            />\n                            :\n                            <input type=\"checkbox\" \n                                    className=\"switch_1\" \n                                    name=\"delay_status\" \n                                    onChange={this.autoSetting} \n                                    id=\"swich\" \n                                    name=\"togg\" \n                                    checked\n                            />\n                            }\n                                \n                                <span className=\"toogler\"></span>\n                            </label>\n                        </span>\n                    </p>\n\n                    <div class=\"settingsMore active\">\n                    <input type=\"number\" placeholder=\"HH\"  min=\"0\" max=\"24\"  name=\"delay_hrs\" value={this.state.delay_hrs} onChange={this.inputChangeHandller} />\n                            \n                        <span>:</span>\n                        <input type=\"number\" placeholder=\"MM\" min=\"0\" max=\"60\"  name=\"delay_minute\" value={this.state.delay_minute} onChange={this.inputChangeHandller} />\n                    </div>\n\n                    <div class=\"submitFormSettings\">\n                        <button class=\"blue_btn submitSettings\" onClick={this.submitAddDefaultMessage} >Save</button>\n                    </div>\n                </div>\n                <Footer></Footer>\n                </div>\n            </div>\n\n        )\n                }\n}\nexport default setting;\n","/var/www/html/extensions/friender/extension/v1/src/components/modules/Setting/Setting.js",["217","218","219","220","221","222","223"],"import React, { useState, useEffect } from \"react\";\nimport Header from \"../Common/header\";\nimport Footer from \"../Common/footer\";\nimport IconLogo from \"../../../images/icon.svg\";\nimport Box from '@mui/material/Box';\nimport Stepper from '@mui/material/Stepper';\nimport Step from '@mui/material/Step';\nimport StepLabel from '@mui/material/StepLabel';\nimport StepContent from '@mui/material/StepContent';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {profileGetter} from \"../../../helper/profileHelper\";\nimport { GetData } from \"../../../helper/helper\";\nimport AuthServices from \"../../../services/authService\";\nimport FriendService from \"../../../services/friendService\";\nimport Moment from 'react-moment';\nimport LinearProgress from '@mui/material/LinearProgress';\nconst Setting = () =>  {\n  const [profile, setProfile] = useState({\n    name: \"XXXXXXXX\",\n    id: \"\",\n    dtsg_token: \"\",\n    image: IconLogo,\n    username: \"XXXXXXX\",\n    default: 0,\n    time:\"00:00:00\"\n  });\n  const [friendlist, setFriendList] = useState({\n    totalfriend: 0 ,\n    totalfriendcapture: 0,\n    totalfriendcapturepersentage: 0\n  });\n  const [friendscrapingstatus, setFriendScrapingStatus] = useState(false);\n  const [activeStep, setActiveStep] = useState(0);\n  const [loader, setloader] = useState(false);\n  const [progress, setProgress] = useState(false);\n  const [circularloading, setCircularloading] = useState(false);\n  const steps = [\n    {\n      label: 'Connect Your Facebook Profile',\n      description: `The Internet has always been, and always will be, a magic box..\n                    So Please let us connect with your profile so that we can do some more.....`,\n      action: `Connect Your Profile`\n    },\n    {\n      label: 'Sync Your Friends List',\n      description:\n        `A family is a risky venture, because the greater the love, the greater the loss…\n         That’s the trade-off. But I’ll take it all.\n         let Sync your Friend List`,\n      action: `Sync Friends`\n    },\n    {\n      label: 'Create an ad',\n      description: `Try out different ad text to see what brings in the most customers,\n                and learn how to enhance your ads using features like ad extensions.\n                If you run into any problems with your ads, find out how to tell if\n                they're running and how to resolve approval issues.`,\n      action: `Sync Friends Engagement`\n    },\n  ];\n  const handleNext = () => {\n    //setloader(true)\n    stepActionInitiator()\n  };\n\n  const handleBack = () => {\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n  const gfs = chrome.storage.local;\n  //This Function will fetch User Set Profile Info\n  const fetchProfileInfo = async () =>{\n    setloader(true)\n    let user_idLocal=await GetData('user_id');\n    if(user_idLocal){\n      let payloadProfile= {\n        user_id:user_idLocal\n      }\n      AuthServices.GetProfile(payloadProfile).then(async result => {\n        console.log(\"This Is The User Info\",result);\n        if (result.data.code == 1){\n          setloader(false);\n          setProfile({\n            name: result.data.payload.UserFacebookName,\n            id: result.data.payload.UserFacebookid,\n            dtsg_token:result.data.payload.UserdtsgToken,\n            image: result.data.payload.UserFacebookImage,\n            username: result.data.payload.UserFacebookUsername,\n            time:result.data.payload.UserdtsgExpire\n            \n          })\n          \n          gfs.set({'UserdtsgToken': result.data.payload.UserdtsgToken});\n          gfs.set({'UserFacebookid': result.data.payload.UserFacebookid});\n          gfs.set({'UserFacebookUsername': result.data.payload.UserFacebookUsername});\n          setActiveStep((prevActiveStep) => prevActiveStep + 1);\n        }else{\n          setloader(false)\n        }\n      }).catch(error=>{\n        setloader(false)\n        \n      });\n    }else{\n      setloader(false)\n    }\n  }\n  //This is for the initial Facebook Profile Grabing\n  useEffect(() => {  \n    fetchProfileInfo();\n  }, []);\n  // This Function Will Fetch User Facebook Information\n  const fetchFacebookProfileInfo  = async ()  =>  {\n    setCircularloading(true);\n    await AuthServices.getProfileInfo().then(async ProfileResult => {\n      //This will regex the response\n      let ProfileInfoGetter =await profileGetter(ProfileResult);\n      if(ProfileInfoGetter.FacebookStatus){\n        await AuthServices.getProfileAccessToken().then(async AccessToken =>{\n          console.log(\"This I got \",AccessToken)\n          setProfile({\n            name: ProfileInfoGetter.UserFacebookName,\n            id: ProfileInfoGetter.UserFacebookid,\n            dtsg_token:ProfileInfoGetter.UserdtsgToken,\n            image: ProfileInfoGetter.UserFacebookImage,\n            username: ProfileInfoGetter.UserFacebookUsername,\n            time:ProfileInfoGetter.UserdtsgExpire\n          });\n            const gfs = chrome.storage.local;\n            gfs.set({'UserdtsgToken': ProfileInfoGetter.UserdtsgToken});\n            gfs.set({'UserFacebookid': ProfileInfoGetter.UserFacebookid});\n            gfs.set({'UserFacebookUsername': ProfileInfoGetter.UserFacebookUsername});\n            gfs.set({'UserFacebookAccessToken': AccessToken});\n            ProfileInfoGetter.user_id=await GetData('user_id');\n            ProfileInfoGetter.kyubi_user_token=await GetData('kyubi_user_token');\n            let ProfileInfo = {\n              UserFacebookName: ProfileInfoGetter.UserFacebookName,\n              UserFacebookid: ProfileInfoGetter.UserFacebookid,\n              UserdtsgToken:ProfileInfoGetter.UserdtsgToken,\n              UserFacebookImage: ProfileInfoGetter.UserFacebookImage,\n              UserFacebookUsername: ProfileInfoGetter.UserFacebookUsername,\n              UserdtsgExpire:ProfileInfoGetter.UserdtsgExpire,\n              user_id: ProfileInfoGetter.user_id,\n              kyubi_user_token:ProfileInfoGetter.kyubi_user_token,\n              access_token:AccessToken\n            }\n            await AuthServices.GetOrStoreProfile(ProfileInfo).then(async result=>{\n              if(result.data.code == 1){\n                setProfile({\n                  name: result.data.payload.UserFacebookName,\n                  id: result.data.payload.UserFacebookid,\n                  dtsg_token:result.data.payload.UserdtsgToken,\n                  image: result.data.payload.UserFacebookImage,\n                  username: result.data.payload.UserFacebookUsername,\n                  time:result.data.payload.UserdtsgExpire\n                  \n                })\n                setCircularloading(false);\n                setActiveStep(1);\n              }else{\n                console.log(\"Error For Profile Info Storing1\");\n                setCircularloading(false);\n              }\n              \n            }).catch(error=>{\n              console.log(\"Error For Profile Info Storing2\");\n              setCircularloading(false);\n            });\n        })\n        \n      }else{\n        //Error For Profile Info \n        console.log(\"Error For Profile Info Scraping2\");\n        setCircularloading(false);\n      }\n    }).catch(error=>{\n      console.log(\"Error For Profile Info Storing1\");\n      setCircularloading(false);\n    });\n  }\n  // This Function will fetch Facebook Friends\n  const fetchFacebookFriendsListAndCounts = async (user_id,dtsgToken,Facebookid,Username,FacebookCursior)  =>  {\n    setProgress(true);\n    \n    let TotalFriendPayload ={\n      dtsg:dtsgToken,\n      FBuserId:Facebookid,\n      cursor:FacebookCursior\n    }\n    FriendService.GetFacebookFriends(TotalFriendPayload).then(async resultFriendList=>{\n      console.log(\"This are the Facebook Info\",resultFriendList)\n      if(resultFriendList.success){\n        // let payloadCountStore={\n        //   totalfriendCount:resultFriendList.count,\n        //   friends:resultFriendList.friends,\n        //   UserFacebookid:Facebookid,\n        //   user_id:user_id\n        // }\n        // console.log(\"this are the payload we have to sent to backend\",payloadCountStore)\n        await resultFriendList.friends.map(async friend=>{\n          console.log(\"Please check this friend \", friend.node);\n          let access_tokenLocal=await GetData('access_token');\n          let IndvFriendPayload ={\n            dtsg:dtsgToken,\n            FBuserId:Facebookid,\n            cursor:FacebookCursior,\n            FriendId:friend.node.url,\n            AccessTokenVal:access_tokenLocal\n          }\n          await FriendService.getFriendDetailInfo(IndvFriendPayload).then(async FriendDetails =>{\n            console.log(\"this are the FriendDetails\",FriendDetails)\n          })\n        })\n      }else{\n      console.log(\"Error For Getting the Friend Info\");\n      setProgress(false);\n      }\n    }).catch(error=>{\n      console.log(\"From Setting Page\",error);\n      setProgress(false);\n    })\n  }\n  // This Function Depending on the step will perform the Pulling action\n  const stepActionInitiator = async ()  =>{\n    if(activeStep === 0){\n      console.log(\"Please call the function to get the user facebook Info\");\n      fetchFacebookProfileInfo();\n      //setActiveStep(1);\n    }else if(activeStep === 1){\n      console.log(\"Please call the function to get the user facebook Friend Info\");\n    let user_idLocal=await GetData('user_id');\n    let UserdtsgTokenLocal=await GetData('UserdtsgToken');\n    let UserFacebookidLocal=await GetData('UserFacebookid');\n    let UserFacebookUsernameLocal=await GetData('UserFacebookUsername');\n    let UserFacebookCursior = \"\"\n      fetchFacebookFriendsListAndCounts(user_idLocal,UserdtsgTokenLocal,UserFacebookidLocal,UserFacebookUsernameLocal,UserFacebookCursior);\n      //setActiveStep(2);\n    }else{\n      console.log(\"Please call the function to get the user facebook Friend Association Info\");\n      //setActiveStep(3);\n    }\n  }\n\n  return  (\n    <div className=\"settings\">\n      {loader && (\n          <div className=\"after_login_refresh\"><img src={process.kyubi.loader.preLoader} alt=\"\" /></div>\n      )}\n      <Header selectedtab=\"dashboard\"></Header>\n\n          <div className=\"after_log_profile\">\n            <img src={profile.image} alt=\"\" />\n            <p>Welcome</p>\n            <h3>{profile.name}</h3>\n            <h5>{profile.username}</h5>\n            <h7>Your Profile is Synced for <Moment date={profile.time} format=\"hh:mm:ss\" trim durationFromNow unix interval={1000}/></h7>\n            \n          </div>\n          <Box sx={{ maxWidth: 400 }}>\n      <Stepper activeStep={activeStep} orientation=\"vertical\">\n        {steps.map((step, index) => (\n          <Step key={step.label}>\n            <StepLabel\n              optional={\n                index === 2 ? (\n                  <Typography variant=\"caption\">Last step</Typography>\n                ) : null\n              }\n            >\n              {step.label}\n            </StepLabel>\n            <StepContent>\n              {circularloading === false ?\n                \n                  <div>\n                  {progress === false ?\n                  <div>\n                    <Typography>{step.description}</Typography>\n                    <Box sx={{ mb: 2 }}>\n                      <div>\n                        <Button\n                          variant=\"contained\"\n                          onClick={handleNext}\n                          sx={{ mt: 1, mr: 1 }}\n                        >\n                          {index === steps.length - 1 ? 'Finish' : step.action}\n                        </Button>\n                        <Button\n                          disabled={index === 0}\n                          onClick={handleBack}\n                          sx={{ mt: 1, mr: 1 }}\n                        >\n                          Back\n                        </Button>\n                      </div>\n                    </Box>\n                  </div>\n                  :\n                  \n                  <StepContent>\n                    <Box sx={{ maxWidth: 400 }}>\n                      <Box sx={{ width: '80%' }}>\n                        <LinearProgress variant=\"determinate\"  value={friendlist.totalfriendcapturepersentage} />\n                      </Box>\n                      <Box sx={{ minWidth: 35 }}>\n                        <Typography variant=\"body2\" color=\"text.secondary\">Syncked {friendlist.totalfriendcapture} out of {friendlist.totalfriend} ({friendlist.totalfriendcapturepersentage}%) ....</Typography>\n                      </Box>\n                    </Box>\n                  </StepContent>\n                  }\n                  </div>\n                \n                :\n                <Box sx={{ display: 'flex' }}>\n                  <CircularProgress color=\"primary\" />\n                </Box>\n                \n                }\n              </StepContent>\n          </Step>\n        ))}\n      </Stepper>\n      {activeStep === steps.length && (\n        <Paper square elevation={0} sx={{ p: 3 }}>\n          <Typography>All steps completed - you&apos;re finished</Typography>\n          <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>\n            Reset\n          </Button>\n        </Paper>\n      )}\n    </Box>\n    </div>\n  );\n}\nexport default Setting;","/var/www/html/extensions/friender/extension/v1/src/components/modules/AutoResponder/autoResponderEdit.js",["224","225","226"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\nimport Sidebar from \"../Common/sidebar\"\nimport ReactDOM from 'react-dom';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { GetData } from \"../../../helper/helper\";\nconst KeyCodes = {\n    comma: 188,\n    enter: 13,\n  };\n  \nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\nclass autoResponderEdit extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        auto_responder_id:\"\",\n        auto_responder_name:\"\",\n        auto_responder_keywords: [],\n        auto_responder_message:\"\",\n        auto_responder_status:0,\n        loader:false\n      };\n      this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n    }\n    handleDelete(i) {\n        const { auto_responder_keywords } = this.state;\n        this.setState({\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\n        });\n    }\n\n    handleAddition(auto_responder_keyword) {\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\n    }\n    /**\n        * @inputChangeHandller \n        * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    autoSetting = () => {\n        // console.log(\"hiyy\",this.state.auto_responder_status )\n        if(this.state.auto_responder_status === 0){\n            this.setState({auto_responder_status:1})\n        }else{\n            this.setState({auto_responder_status:0})\n        }\n    }\n    updateAutoResponderGroupHandler = async (event) =>{\n        this.setState({loader:true});\n        event.preventDefault();\n        // let Token=localStorage.getItem(\"kyubi_user_token\");\n        let Token = await GetData('kyubi_user_token');\n        \n        let payload = {\n            user_id:Token,\n            auto_responder_id:this.state.auto_responder_id,\n            auto_responder_name:this.state.auto_responder_name,\n            auto_responder_keywords:this.state.auto_responder_keywords,\n            auto_responder_message:this.state.auto_responder_message,\n            auto_responder_status:this.state.auto_responder_status\n        }\n        // console.log(\"This I am Getting\",payload)\n        \n        AutoResponderService.updateAutoResponder(payload).then(response =>{\n          \n          this.setState({loader:false});\n           this.props.history.push('/autoresponder');\n        });\n      }\n      backAutoResponderGroupHandler =  (event) =>{\n        \n          this.props.history.push('/autoresponder');\n       \n      }\n      componentDidMount(){\n        this.setState({loader:true});\n        let payload = { Id: this.props.match.params.idfy };\n        // console.log(payload);\n        AutoResponderService.editAutoResponder(payload).then(async response=>{\n            // console.log(response);\n            if(response.data.code === 1){\n                let newKey=[];\n                await response.data.payload[0].autoresponderkeywords.map(async (result, i) => {\n                    // console.log(result.keywords);\n                    newKey.push({\"id\":result.keywords,\"text\":result.keywords})\n                });\n                this.setState({\n                    auto_responder_id:response.data.payload[0]._id,\n                    auto_responder_name:response.data.payload[0].auto_responder_name,\n                    auto_responder_message:response.data.payload[0].message,\n                    auto_responder_status:response.data.payload[0].status,\n                    auto_responder_keywords:newKey,\n                    loader:false\n                  })\n            }\n        }).catch(error=>{\n\n        })\n      }\n    render() {\n        const { auto_responder_keywords } = this.state;\n        return (\n            <div className=\"wrapper\">\n                {this.state.loader && (   \n                    <div className=\"overlay\">\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\n                    </div>\n                )}\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\n                <div className=\"content-wrapper\">\n                <section className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row mb-12\">\n                            <div className=\"col-sm-6\">\n                            <h1>Auto-Responder</h1>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                            \n                            <div className=\"card card-primary\">\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\n                                </div>\n                                <form>\n                                <div className=\"card-body\">\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\n                                        <input type=\"text\"\n                                            name=\"auto_responder_name\" \n                                            className=\"form-control\" \n                                            id=\"exampleInputEmail1\" \n                                            placeholder=\"Auto-Responder Name\" \n                                            value={this.state.auto_responder_name}\n                                            onChange={this.inputChangeHandller}\n                                        />\n                                    </div>\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\n                                        <ReactTags \n                                        placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\n                                        tags={auto_responder_keywords}\n                                        handleDelete={this.handleDelete}\n                                        handleAddition={this.handleAddition}\n                                        allowUnique={true}\n                                        delimiters={delimiters} />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\n                                        <textarea \n                                        name=\"auto_responder_message\" \n                                        value=\"\"  \n                                        className=\"form-control\" \n                                        rows=\"3\"  \n                                        placeholder=\"Please enter the response message....\"\n                                        value={this.state.auto_responder_message}\n                                        onChange={this.inputChangeHandller}\n                                        ></textarea>\n                                    </div>\n                                    <div className=\"form-group clearfix\">\n                                        <div className=\"icheck-success d-inline\">\n                                        \n                                        {this.state.auto_responder_status ?\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\n                                        :\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\n                                        }\n                                        <label for=\"checkboxPrimary3\">\n                                            Activate Auto-Responder\n                                        </label>\n                                        </div>\n                                    </div>\n                                    \n                                </div>           \n                                <div className=\"card-footer\">\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.updateAutoResponderGroupHandler} >Update</button>\n                                <button type=\"button\" className=\"btn btn-secondary  float-right\"  onClick={this.backAutoResponderGroupHandler} ><i className=\"far fa-arrow-alt-circle-left\"></i> Back</button>\n                                </div>\n                                </form>\n                            </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default autoResponderEdit;","/var/www/html/extensions/friender/extension/v1/src/components/modules/AutoResponder/autoResponderCreate.js",["227","228","229"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport AutoResponderService from  \"../../../services/autoResponderServices\"\nimport Sidebar from \"../Common/sidebar\"\nimport ReactDOM from 'react-dom';\nimport { WithContext as ReactTags } from 'react-tag-input';\nimport { GetData } from \"../../../helper/helper\";\nconst KeyCodes = {\n    comma: 188,\n    enter: 13,\n  };\n  \nconst delimiters = [KeyCodes.comma, KeyCodes.enter];\n  \nclass autoResponderCreate extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        auto_responder_name:\"\",\n        auto_responder_message:\"\",\n        auto_responder_status:1,\n        loader:false,\n        auto_responder_keywords: [],\n      };\n        this.handleDelete = this.handleDelete.bind(this);\n        this.handleAddition = this.handleAddition.bind(this);\n        \n    }\n    handleDelete(i) {\n        const { auto_responder_keywords } = this.state;\n        this.setState({\n            auto_responder_keywords: auto_responder_keywords.filter((auto_responder_keyword, index) => index !== i),\n        });\n    }\n\n    handleAddition(auto_responder_keyword) {\n        this.setState(state => ({ auto_responder_keywords: [...state.auto_responder_keywords, auto_responder_keyword] }));\n    }\n\n    \n    /**\n        * @inputChangeHandller \n        * getting input field values\n    */\n    inputChangeHandller = (event) => {\n        this.setState({ [event.target.name]: event.target.value })\n    }\n    autoSetting = () => {\n        // console.log(\"hiyy\",this.state.auto_responder_status )\n        if(this.state.auto_responder_status === 0){\n            this.setState({auto_responder_status:1})\n        }else{\n            this.setState({auto_responder_status:0})\n        }\n    }\n    createAutoResponderGroupHandler = async (event) =>{\n        this.setState({loader:true});\n        event.preventDefault();\n        let Token = await GetData('kyubi_user_token');\n        \n        let payload = {\n            user_id:Token,\n            auto_responder_name:this.state.auto_responder_name,\n            auto_responder_keywords:this.state.auto_responder_keywords,\n            auto_responder_message:this.state.auto_responder_message,\n            auto_responder_status:this.state.auto_responder_status\n        }\n        // console.log(\"This I gottttt\",payload);\n        AutoResponderService.createAutoResponder(payload).then(response =>{\n          \n          this.setState({loader:false});\n          this.props.history.push('/autoresponder');\n        });\n      }\n    render() {\n        const { auto_responder_keywords } = this.state;\n        return (\n            <div className=\"wrapper\">\n                {this.state.loader && (   \n                    <div className=\"overlay\">\n                    <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\n                    </div>\n                )}\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\n                <div className=\"content-wrapper\">\n                <section className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row mb-12\">\n                            <div className=\"col-sm-6\">\n                            <h1>Auto-Responder</h1>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row\">\n                            <div className=\"col-md-12\">\n                            \n                            <div className=\"card card-primary\">\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\"> Create Auto-Responder</h3>\n                                </div>\n                                <form>\n                                <div className=\"card-body\">\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Name</label>\n                                        <input type=\"text\"\n                                            name=\"auto_responder_name\" \n                                            className=\"form-control\" \n                                            id=\"exampleInputEmail1\" \n                                            placeholder=\"Auto-Responder Name\" \n                                            value={this.state.auto_responder_name}\n                                            onChange={this.inputChangeHandller}\n                                        />\n                                    </div>\n                                    \n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Keywords</label>\n                                        <ReactTags \n                                        placeholder=\"Press enter Or Press , to Create Autoresponder Keywords\"\n                                        tags={auto_responder_keywords}\n                                        handleDelete={this.handleDelete}\n                                        handleAddition={this.handleAddition}\n                                        allowUnique={true}\n                                        delimiters={delimiters} />\n                                        \n\n\n                                        \n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label for=\"exampleInputEmail1\">Auto-Responder Response Message</label>\n                                        <textarea \n                                        name=\"auto_responder_message\" \n                                        value=\"\"  \n                                        className=\"form-control\" \n                                        rows=\"3\"  \n                                        placeholder=\"Please enter the response message....\"\n                                        value={this.state.auto_responder_message}\n                                        onChange={this.inputChangeHandller}\n                                        ></textarea>\n                                    </div>\n                                    <div className=\"form-group clearfix\">\n                                        <div className=\"icheck-success d-inline\">\n                                        {this.state.auto_responder_status ?\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting} checked/>\n                                        :\n                                        <input type=\"checkbox\" id=\"checkboxPrimary3\" name=\"auto_responder_status\" onChange={this.autoSetting}/>\n                                        }\n                                        <label for=\"checkboxPrimary3\">\n                                            Activate Auto-Responder\n                                        </label>\n                                        </div>\n                                    </div>\n                                    \n                                </div>           \n                                <div className=\"card-footer\">\n                                <button type=\"submit\" className=\"btn btn-primary\" onClick={this.createAutoResponderGroupHandler} >Submit</button>\n                                </div>\n                                </form>\n                            </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default autoResponderCreate;","/var/www/html/extensions/friender/extension/v1/src/components/modules/AutoResponder/autoResponder.js",["230"],"import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport Sidebar from \"../Common/sidebar\";\nimport AutoResponderService from  \"../../../services/autoResponderServices\";\nimport settingService   from  \"../../../services/setting\";\nimport { GetData } from \"../../../helper/helper\"\nclass autoResponnder extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        autoresponderList :[],\n        loader:true\n      }\n    }\n    componentDidMount= async () => {\n        const gfs = chrome.storage.local;\n        let UserToken = await GetData('kyubi_user_token');\n        \n        //this.setState({autoresponderList:autoresponderList})\n        let payload ={\n            user_id:UserToken\n        }\n        AutoResponderService.listAutoResponder(payload).then(async response =>{\n        //   // console.log(\"This is what i Got\",response);\n          if(response.data.payload !=  \"\" ){\n            // console.log(\"This is what i Got\",response.data.payload);\n            if(response.data.payload.autokey.length>0){\n                // console.log(\"This is what i Got\",response.data.payload.autokey);\n                this.setState({autoresponderList:response.data.payload.autokey})\n            }\n            \n          }\n          \n            this.setState({loader:false});\n        }).catch(error=>{\n            this.setState({loader:false});\n        });\n\n    \n    \n        let user_id = await GetData('user_id');\n        \n          let Newpayload   ={user_id:user_id }\n          settingService.getUserDetails(Newpayload).then(result  =>{\n            // console.log(\"This is what i111 Got\",result);\n                    gfs.set({'kyubi_user_token': result.data.payload.UserInfo.kyubi_user_token});\n                    gfs.set({'user_id': result.data.payload.UserInfo.user_id});\n                    gfs.set({'fb_id': result.data.payload.UserInfo.facebook_id});\n                    gfs.set({'fb_username': result.data.payload.UserInfo.facebook_name});\n                    gfs.set({'fb_name': result.data.payload.UserInfo.facebook_profile_name});\n                    gfs.set({'fb_image': result.data.payload.UserInfo.facebook_image});\n                      \n\n                      if(result.data.payload.UserSettings.default_message){\n                        gfs.set({'default_message': result.data.payload.UserSettings.default_message});\n                        // localStorage.setItem('default_message', result.data.payload.UserSettings.default_message);\n                      }\n                      if(result.data.payload.UserSettings.default_message_text){\n                        gfs.set({'default_message_text': result.data.payload.UserSettings.default_message_text});\n                        // localStorage.setItem('default_message_text', result.data.payload.UserSettings.default_message_text);\n                      }\n                      if(result.data.payload.UserSettings.autoresponder){\n                        gfs.set({'autoresponder': result.data.payload.UserSettings.autoresponder});\n                        // localStorage.setItem('autoresponder', result.data.payload.UserSettings.autoresponder);\n                      }\n                      if(result.data.payload.UserSettings.default_time_delay){\n                        gfs.set({'default_time_delay': result.data.payload.UserSettings.default_time_delay});\n                        // localStorage.setItem('default_time_delay', result.data.payload.UserSettings.default_time_delay);\n                      }\n                      \n                        gfs.set({'keywordsTally': result.data.payload.UserSettings.AutoResponderKeywords});\n                        // localStorage.setItem('keywordsTally', JSON.stringify(result.data.payload.AutoResponderKeywords));\n          }).catch(error=>{\n            // console.log(\"This is what i222 Got\",error);\n          })\n\n    \n    }\n    render() {\n        return (\n            <div className=\"wrapper\">\n                {this.state.loader && (   \n                <div className=\"overlay\">\n                <i className=\"fas fa-2x fa-sync-alt fa-spin\"></i>\n                </div>\n                )}\n                <Sidebar  selectedtab=\"setting\"></Sidebar>\n                <div className=\"content-wrapper\">\n                <section className=\"content-header\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row mb-12\">\n                            <div className=\"col-sm-6\">\n                            <h1>Auto-Responder</h1>\n                            \n                            <NavLink  to=\"/autorespondercreate\"  class=\"btn btn-app\">\n                                <i class=\"fas fa-plus-square\"></i> Create New Auto-Responder\n                            </NavLink>\n                            </div>\n                        </div>\n                    </div>\n                </section>\n                <section className=\"content\">\n                    <div className=\"container-fluid\">\n                        <div className=\"row overflow-auto\">\n                            <div className=\"col-md-12\">\n                            {Object.keys(this.state.autoresponderList).length > 0 ?\n                            (this.state.autoresponderList.map((data, i) => {\n                                let editlink= \"/autoresponderedit/\"+data._id;\n                            return(\n                                \n                            <div className={data.status ===  1 ? \"card card-success shadow-none\" : \"card card-danger shadow-none\" }>\n                                <div className=\"card-header\">\n                                    <h3 className=\"card-title\">{data.auto_responder_name}</h3>\n                                    <div className=\"card-tools\">\n                                        <button type=\"button\" className=\"btn btn-tool\" data-card-widget=\"collapse\">\n                                        <NavLink  to={editlink}><i className=\"far fa-edit\"></i></NavLink>\n                                        </button>\n                                    </div>\n                                </div>\n                                <div className=\"card-body\" >\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\n                                        <h6>Response Message :</h6>\n                                        <p>{data.message}</p>\n                                    </div>\n                                    <div className={data.status ===  1 ? \"callout callout-success\" : \"callout callout-danger\" }>\n                                        <h6>Keywords :</h6>\n                                        <p>\n                                        {data.autoresponderkeywords.map((result, i) => {\n                                        return (\n                                            <span class=\"badge badge-info\">{result.keywords}</span>\n                                        )\n                                        })\n                                        }\n                                        \n                                        </p>\n                                    </div>\n                                </div>\n                            </div>\n                            \n                            )\n                            }))\n                            :\n                            (this.state.loader ? \" \": \n                            <div className=\"card card-danger shadow-none\">\n                            <div className=\"card-header\">\n                                <h3 className=\"card-title\">Oops !</h3>\n                                <div className=\"card-tools\">\n                                    \n                                </div>\n                            </div>\n                            <div className=\"card-body\" >\n                                <div className=\"callout callout-danger\">\n                                    <h5>Sorry There Is No Auto-Responder</h5>\n                                    \n                                </div>\n                                \n                            </div>\n                            </div> \n                                )\n                              \n                            }       \n                            \n                            </div>\n                        </div>\n                    </div>\n                </section>\n                </div>\n            </div>\n    \n        );\n    }\n}\n\nexport default autoResponnder;","/var/www/html/extensions/friender/extension/v1/src/config.js",[],"/var/www/html/extensions/friender/extension/v1/src/services/setting.js",["231"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst settingService = {\n    setSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/setsetting',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/getSetting',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateAutoresponderSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/updateautoresponder',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getUserDetails: function    (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/getUserDetails',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateLoadStatus: function   (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/setting/updateLoadStatus',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    }\n    \n}\n\nexport default settingService;","/var/www/html/extensions/friender/extension/v1/src/services/autoResponderServices.js",["232"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst autoResponderServices = {\n    createAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/create',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    listAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/list',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    editAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/edit',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateAutoResponder: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url:host + '/api/autoresponder/update',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateAutoResponderStatus: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/updateStatus',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    deleteAutoResponderStatus: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/autoresponder/delete',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n}\nexport default autoResponderServices;","/var/www/html/extensions/friender/extension/v1/src/services/authService.js",["233"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst authService = {\n    login: function (payload) {\n        // console.log(payload);\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: process.kyubi.loginURL,\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    userRetrive: function    (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/user/userRetrive',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getProfileInfo: function  () {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'GET',\n                mode: \"cors\", // no-cors, cors, *same-origin\n                url: \"https://m.facebook.com/composer/ocelot/async_loader/?publisher=feed\",\n                headers: {  \n                        \"baseURL\": \"https://www.facebook.com\",\n                        \"Content-Type\": \"application/x-www-form-urlencoded\",\n                        \"Accept\": \"text/html,application/json\",\n                        \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n                }\n                // data: JSON.stringify(payload)\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success profile get\",res);\n                    resolve(res.data)\n                })\n                .catch(err => {\n                    // console.log(\"Error In get profile data\");\n                    reject(err)\n                })\n        })\n    },\n    messageSend: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                mode: \"cors\", // no-cors, cors, *same-origin\n                url: 'https://m.facebook.com/messages/send/?icm=1',\n                headers: {  \n                    \"Origin\": \"https://m.facebook.com\",\n                    'Content-Type': 'text/html' },\n                data: JSON.stringify(payload)\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success profile get\",res);\n                    resolve(res.data)\n                })\n                .catch(err => {\n                    // console.log(\"Error In get profile data\");\n                    reject(err)\n                })\n            })\n    },\n    forgotPassword: function (payload) {\n        return new Promise((resolve, reject) => {\n            // console.log(payload);\n            let options = {\n                method: 'POST',\n                mode: \"cors\", // no-cors, cors, *same-origin\n                url: process.kyubi.forgotPassURL,\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: JSON.stringify(payload)\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"Error In Forgot Password\");\n                    reject(err)\n                })\n        })\n\n    },\n    GetOrStoreUser: function    (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/user/getOrStoreUser',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },GetOrStoreProfile: function    (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/profile/getOrStoreProfile',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },GetProfile: function    (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/profile/getProfile',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getProfileAccessToken:  function    (payload)   {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'GET',\n                mode: \"cors\", // no-cors, cors, *same-origin\n                url: \"https://business.facebook.com/creatorstudio/home\",\n                headers: {  \n                        \"authority\": \"business.facebook.com\",\n                        \"Content-Type\": \"application/x-www-form-urlencoded\",\n                        \"Accept\": \"text/html,application/json\"\n                }\n                // data: JSON.stringify(payload)\n            }\n            axios(options)\n                .then(res => {\n                        console.log(\"In Success profile get\",res);\n                        const responseText = res.data;\n                        const match = responseText.match(/\"userAccessToken\":\"(.*?)\"/);\n                        if (match && Array.isArray(match)) {\n                            let accessToken = match[1];\n                            resolve(accessToken)\n                        }   \n                    //resolve(res.data)\n                })\n                .catch(err => {\n                    // console.log(\"Error In get profile data\");\n                    reject(err)\n                })\n        })\n    }\n\n    \n}\n\nexport default authService","/var/www/html/extensions/friender/extension/v1/src/helper/loginHelper.js",[],"/var/www/html/extensions/friender/extension/v1/src/helper/helper.js",["234","235"],"/* eslint-disable no-undef */\n/** \n * @OpenFacebookInTab\n * this function will open Facebook in a new  tab and will  focus  on it\n * \n*/\nimport AuthServices from \"../services/authService\";\n\nexport function OpenFacebookInTab() {\n    try{\n        const myNewUrl  =   `https://www.facebook.com/me`;\n            let CreateTab    =   chrome.tabs.create({\n                url: myNewUrl,\n                active: true\n              });\n              // console.log(\"This is a \",CreateTab);\n              return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n\n/** \n * @CheckUserInfoFromFaccebook\n * this function will open Facebook in a new Window and grab its info\n * \n*/\nexport async function CheckUserInfoFromFaccebook() {\n    try{  \n        const gfs = chrome.storage.local;\n        let fbprofile = await GetData('fbprofile'), \n            fbmunread = await GetData('fbmunread');\n        \n        // if(fbprofile){\n        //     let newtab=parseInt(fbprofile);\n        //     chrome.tabs.remove(newtab, function() {\n        //         gfs.remove(['fbprofile']);\n        //     });\n        // }\n        if(fbmunread){\n            let newtabx=parseInt(fbmunread);\n            chrome.tabs.remove(newtabx, function() { \n                gfs.remove(['fbmunread']);\n            });\n        }\n        gfs.remove(['fbthread']);\n        const myNewUrl  =   `https://www.facebook.com`;\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: false,\n            pinned:true\n        },function(tab) { \n            let fbprofile=tab.id;\n            gfs.set({'fbprofile': fbprofile});\n            //  chrome.tabs.executeScript(tab.id, {file: \"profileOverlay.js\"}, function() { \n            //                         // console.log(\"Its been called\");\n            //                       });\n            //chrome.runtime.sendMessage({type: \"OpenMessageProfileToRead\", options: fbprofile});\n\n        });\n\n            return CreateTab;\n            \n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n\n  /** \n * @getData\n * this function will grab data from local store\n * \n*/\n\nexport function GetData(key) {\n  return new Promise((resolve, reject) => {\n      try {\n        chrome.storage.local.get([key], function (res) {\n          if (!isEmptyObj(res)) {\n            // console.log(\"key in helper : \", key);\n            // console.log(\"retieved data in helper : \",res[key]);\n            if(res[key]!=null || res[key]!=undefined)\n              resolve(res[key]);\n            else {\n                resolve(0);\n            }\n          } else {\n            resolve(0);\n          }\n        });\n      } catch (e) {\n        resolve(0);\n      }\n  });\n      \n}\n\n/** \n * @isEmptyObj\n * this function will check wheather the @obj is object or not\n * \n*/\nconst isEmptyObj = function (obj) {\n    for (var key in obj) {\n      if (obj.hasOwnProperty(key)) return false;\n    }\n    return true;\n  };\n\n/** \n * @OpenFacebookProfileInTab\n * this function will open Facebook Profile in a new Tab\n * \n*/\nexport async function OpenFacebookProfileInTab() {\n    try{\n        let fb_name = await GetData('fb_name');\n        \n        const myNewUrl  =   'https://www.facebook.com/'+fb_name;\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: true\n          });\n          // console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n}\n/** \n * @OpenPortalInTab\n * this function will open Friender Portal in a new Tab\n * \n*/\nexport async function OpenPortalInTab() {\n  try{\n      let kyubi_user_token = await GetData('kyubi_user_token');\n      \n      const myNewUrl  =   'https://rahuler.ngrok.io/setlaunchpad/'+kyubi_user_token;\n      let CreateTab    =   chrome.tabs.create({\n          url: myNewUrl,\n          active: true\n        });\n        // console.log(\"This is a \",CreateTab);\n        return CreateTab;\n  }catch(error){\n      // console.log(\"This is a \",error);\n  }\n}\n\nexport  const getDTSG = function () {    \n  AuthServices.getProfileInfo().then((result) => {\n    try {\n      let  dtsg\n      const regex4 = /\\\\\"dtsg\\\\\":\\{[^}]*\\}/gm; \n      if (result.match(regex4)!= null) {\n        // console.log(\"it is true\");\n\n        dtsg = result.match(regex4)[0];\n\n        dtsg = \"{\" + dtsg.replace(/[\\\\]/g, \"\") + \"}\";\n        // console.log(\"dtsg in login helper 2\", dtsg);\n\n        dtsg = JSON.parse(dtsg).dtsg;\n        console.log(\"dtsg in login helper 3\", dtsg);\n      }\n      console.log(\"dtsg : \", dtsg);\n      chrome.storage.set({\"dtsg\" : dtsg});\n      // return(dtsg);\n    }\n    catch (err) {\n      // console.log(\"err : \", err);\n    }\n  }).catch(error => {\n      // console.log(\"This I got From backGround EROOOOOO dash1\", error);\n  })\n}\n\n/** \n * @OpenPoweredBy\n * this function will open Powered By in a new Tab\n * \n*/\nexport function OpenPoweredBy() {\n    try{\n        const myNewUrl  =   'https://www.tier5.us';\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: true\n          });\n          // console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n/** \n * @OpenTier5Partnership\n * this function will open Tier5 Partnership in a new Tab\n * \n*/\nexport function OpenTier5Partnership() {\n    try{\n        const myNewUrl  =   'https://partner.tier5.us';\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: true\n          });\n          // console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n/** \n * @OpenFacebookLink\n * this function will open Facebook Link in a new Tab\n * \n*/\nexport function OpenFacebookLink() {\n    try{\n        const myNewUrl  =   'https://www.facebook.com/tier5development';\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: true\n          });\n          // console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n/** \n * @OpenMessengerLink\n * this function will open Powered By in a new Tab\n * \n*/\nexport function OpenMessengerLink() {\n    try{\n        const myNewUrl  =   'https://www.messenger.com/tier5development';\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: true\n          });\n          // console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n/** \n * @OpenSignupLink\n * this function will open Signup Link in a new Tab\n * \n*/\nexport function OpenSignupLink() {\n    try{\n        const myNewUrl  =   'https://www.mefnevan.com';\n        let CreateTab    =   chrome.tabs.create({\n            url: myNewUrl,\n            active: true\n          });\n          // console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n\nexport function framecaller()   {\n    try{\n        const myNewUrl  =   'https://www.facebook.com/'\n        // console.log(\"This is a \",myNewUrl);\n        return myNewUrl;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n}\n\n/** \n * @OpenLink\n * this function will open Link in a new Tab\n * \n*/\nexport function OpenLink(URL) {\n    try{\n        let CreateTab    =   chrome.tabs.create({\n            url: URL,\n            active: true\n          });\n          // console.log(\"This is a \",CreateTab);\n          return CreateTab;\n    }catch(error){\n        // console.log(\"This is a \",error);\n    }\n  }\n\n/** \n * @serializeFBTotalReq\n * this function creat Serialize data for getting friends count\n * \n*/\nexport async function serializeFBTotalReq(FBuserId,dtsg,cursor) {\n  try{\n    let rawData = {\n      av: FBuserId,\n      __user: FBuserId,\n      __a: 1,\n      dpr: 1,\n      fb_dtsg: dtsg,\n      fb_api_caller_class: \"RelayModern\",\n      fb_api_req_friendly_name: \"FriendingCometFriendsListPaginationQuery\",\n      variables: JSON.stringify({\n        count: 20,\n        cursor: cursor,\n        name: null,\n        scale: 1,\n      }),\n      server_timestamps: true,\n      doc_id: 3303339779712430,\n    };\n    let str = [];\n    for (let p in rawData)\n      if (rawData.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(rawData[p]));\n      }\n    return str.join(\"&\");\n  }catch(error){\n      // console.log(\"This is a \",error);\n  }\n}\n/** \n * @serializeFBTotalReq\n * this function creat Serialize data for getting friends list\n * \n*/\nexport async function serializeFBFriendReq(FBuserId,dtsg,cursor) {\n  try{\n    let rawData = {\n      av: FBuserId,\n      __user: FBuserId,\n      __a: 1,\n      dpr: 1,\n      fb_dtsg: dtsg,\n      fb_api_caller_class: \"RelayModern\",\n      fb_api_req_friendly_name: \"FriendingCometFriendsListPaginationQuery\",\n      variables: JSON.stringify({\n        count: 30,\n        cursor: cursor,\n        name: null,\n        scale: 1,\n      }),\n      server_timestamps: true,\n      doc_id: 3303339779712430,\n    };\n    let str = [];\n    for (let p in rawData)\n      if (rawData.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(rawData[p]));\n      }\n    return str.join(\"&\");\n  }catch(error){\n      // console.log(\"This is a \",error);\n  }\n}\nexport async function serializeFBFriendInd(FBuserId,dtsg,cursor,FriendUrl) {\n  try{\n    let rawData = {\n      av: FBuserId,\n      __user: FBuserId,\n      __a: 1,\n      dpr: 1,\n      fb_dtsg: dtsg,\n      fb_api_caller_class: \"RelayModern\",\n      referer:FriendUrl,\n      fb_api_req_friendly_name: \"ProfileCometTimelineFeedRefetchQuery\",\n      variables: JSON.stringify({\n        count: 30,\n        cursor: cursor,\n        name: null,\n        scale: 1,\n      }),\n      server_timestamps: true,\n      doc_id: 3303339779712430,\n    };\n    let str = [];\n    for (let p in rawData)\n      if (rawData.hasOwnProperty(p)) {\n        str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(rawData[p]));\n      }\n    return str.join(\"&\");\n  }catch(error){\n      // console.log(\"This is a \",error);\n  }\n}\n//serializeFBReq\n\n  // const serializeFBReq = async (obj) =>{\n  //   var str = [];\n  //   for (var p in obj)\n  //     if (obj.hasOwnProperty(p)) {\n  //       str.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(obj[p]));\n  //     }\n  //   return str.join(\"&\");\n  // };","/var/www/html/extensions/friender/extension/v1/src/helper/generateDeviceID.js",[],"/var/www/html/extensions/friender/extension/v1/src/components/modules/Common/footer.js",["236","237","238","239","240","241","242","243","244","245","246","247","248"],"import React, { Component } from \"react\";\nimport logo from \"../../../images/logo.svg\";\nimport { NavLink } from \"react-router-dom\";\nimport FaceBookLogo from \"../../../images/Path3.svg\";\nimport MessenderLogo from \"../../../images/Messanger.svg\";\nimport  {OpenLink,OpenPoweredBy,OpenTier5Partnership,OpenFacebookLink,OpenMessengerLink,OpenSignupLink} from  '../../../helper/helper';\nclass footer extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          \n        }\n      }\n      \n    componentDidMount(){\n        // console.log(\"I am In Header\");\n    }\n    LinkHandler(option,event){\n        event.preventDefault();\n        OpenLink(option);\n    }\n    render() {\n        return (\n            <div className=\"footer\">\n            {process.kyubi.footer.showFooter && ( \n                <div>\n\n                <p>\n                {process.kyubi.footer.poweredBy.willBeDisplayed === true ?\n                   <>\n                        Powered by <a  onClick={(event) => this.LinkHandler(process.kyubi.footer.poweredBy.url,event)} href=\"#\">{process.kyubi.footer.poweredBy.label}</a>\n                   </>\n                 :\n                    \"\"\n                }\n                {process.kyubi.footer.partnership.willBeDisplayed === true ?\n                   <>\n                       and the <a  onClick={(event) => this.LinkHandler(process.kyubi.footer.partnership.url,event)}  href=\"#\">{process.kyubi.footer.partnership.label}</a>\n                   </>\n                 :\n                    \"\"\n                }\n                </p>\n                {process.kyubi.footer.chatSupport.willBeDisplayed === true ?\n                <a  onClick={(event) => this.LinkHandler(process.kyubi.footer.chatSupport.url,event)}  href=\"#\"><img src={FaceBookLogo}/></a>\n                :\n                \"\"\n                }\n                {process.kyubi.footer.officialGroup.willBeDisplayed === true ?\n                <a  onClick={(event) => this.LinkHandler(process.kyubi.footer.officialGroup.url,event)}  href=\"#\"><img src={MessenderLogo}/></a>\n                :\n                \"\"\n                }\n                 \n                </div>\n            )}\n            </div>\n        )\n    }\n}\nexport default footer;","/var/www/html/extensions/friender/extension/v1/src/components/modules/Common/sidebar.js",["249","250","251","252"],"import React, { Component } from \"react\";\nimport logo from \"../../../image/Logo_Side.png\";\nimport { NavLink } from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport {Animated} from \"react-animated-css\";\nimport * as authAction from '../../../store/actions/Auth/authAction';\nclass sidebar extends Component {\n    constructor(props) {\n      super(props)\n      this.state = {\n        selected:this.props.selectedtab,\n        openSidebar:false,\n        \n      }\n    }\n    HideMenu = (event) => {\n      event.preventDefault();\n      // console.log(this.props.shownav);\n      this.setState({\n        openSidebar:false\n      })\n    }\n    ShowMenu = (event) => {\n      event.preventDefault();\n      // console.log(this.props.shownav);\n      this.setState({\n        openSidebar:true\n      })\n    }\n    componentDidMount(){\n      \n        // console.log(\"I am in sidebar =====\",this.props.login_user_profile_info);\n    }\n    render() {\n        return (\n        <div>\n          <nav className=\"main-header navbar navbar-expand  navbar-dark\">\n              <ul className=\"navbar-nav\">\n                <li className=\"nav-item\">\n                  <a className=\"nav-link\" onClick={this.ShowMenu} data-widget=\"pushmenu\" href=\"#\" role=\"button\">\n                    <i className=\"fas fa-bars\"></i>\n                  </a>\n                </li>\n              </ul>\n          </nav>\n        {this.state.openSidebar ?\n                      \n                      <div className=\"main-sidebar sidebar-light-primary elevation-4 sidebar-no-expand\" id=\"navbarMenu\">\n              \n                      <a href=\"\" onClick={this.HideMenu} ><div className=\"crossbox\"><i class=\"fas fa-times\"></i></div></a>\n                      \n                        <NavLink  to=\"/dashboard\" className=\"brand-link\">\n                        \n                          <img  src={logo} className=\"Brandlogo\"></img>\n                        \n                        </NavLink>\n                        <div className=\"sidebar\">\n                          <nav className=\"mt-2\">\n                            <ul className=\"nav nav-pills nav-sidebar flex-column\" data-widget=\"treeview\" role=\"menu\" data-accordion=\"false\">\n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/dashboard\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-tachometer-alt\"></i>\n                                    <p>\n                                      Dashboard\n                                    </p>\n                                  </NavLink>\n                              </li>\n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/setting\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-cogs\"></i>\n                                    <p>\n                                      Setting\n                                    </p>\n                                  </NavLink>\n                              </li> \n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/delay_setting\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-cogs\"></i>\n                                    <p>\n                                      Delay Setting\n                                    </p>\n                                  </NavLink>\n                              </li>  \n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/autoresponder\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-magic\"></i>\n                                    <p>\n                                      Auto-Responder\n                                    </p>\n                                  </NavLink>\n                              </li>\n                              \n                              <li className=\"nav-item\">\n                                  <NavLink  to=\"/logout\" className=\"nav-link\">\n                                    <i className=\"nav-icon fas fa-sign-out-alt\"></i>\n                                    <p>\n                                      Logout\n                                    </p>\n                                  </NavLink>\n                              </li>\n                            </ul>\n                          </nav>\n                        </div>\n                      </div>\n                   \n        :\n        \"\"\n        }\n        </div>\n          \n         \n\n          \n        );\n    }\n}\n\n/**\n * @mapStateToProps\n * get the values from redux store for updating the front end\n*/\nconst mapStateToProps = (state) => {\n  return {\n    login_user_profile_info: state.auth.payload\n  }\n}\n\n\n\n/**\n * @mapDispatchToProps\n * send the values to redux store when an admin user is created, suspended or activated\n */\nconst mapDispatchToProps = dispatch => {\n  return {\n      setProfileInfo: load => dispatch(authAction.addProfileInfo(load))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(sidebar);","/var/www/html/extensions/friender/extension/v1/src/store/actions/Auth/authAction.js",[],"/var/www/html/extensions/friender/extension/v1/src/services/friendService.js",["253","254"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\nimport {serializeFBTotalReq,serializeFBFriendReq,serializeFBFriendInd} from '../helper/helper';\nconst friendervice = {\n    scrapFriends: function (payload) {\n        return new Promise((resolve, reject) => {\n             fetch(\"https://www.facebook.com/api/graphql/\", {\n    method: \"POST\",\n    headers: {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    Accept: \"text/html,application/json\",\n    \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n    },\n    body: payload,\n    }).then(async result=>{\n        console.log(\"-------\",result)\n        let resp = await result.json();\n        if (resp.hasOwnProperty(\"data\")) {\n            if (resp.data.hasOwnProperty(\"viewer\")) {\n                if (resp.data.viewer.hasOwnProperty(\"all_friends\")) {\n                  if (resp.data.viewer.all_friends.hasOwnProperty(\"edges\")) {\n                    let dataToSync = [];\n                    console.log(\n                      resp.data.viewer.all_friends.edges.length,\n                      \n                    );\n                  }\n                  console.log(resp.data.viewer.all_friends);\n                }\n            }\n        }\n    })\n        })\n    \n        // return new Promise((resolve, reject) => {\n        //     let options = {\n        //         method: 'POST',\n        //         url: \"https://www.facebook.com/api/graphql/\",\n        //         headers: {  \n        //             \"baseURL\": \"https://www.facebook.com\",\n        //             \"Content-Type\": \"application/x-www-form-urlencoded\",\n        //             \"Accept\": \"text/html,application/json\",\n        //             \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n        //     },\n        //     body: payload\n        //     }\n        //     axios(options)\n        //         .then(res => {\n        //             console.log(\"In Success\");\n        //             resolve(res)\n        //         })\n        //         .catch(err => {\n        //             // console.log(\"In Error\");\n        //             reject(err)\n        //         })\n        // })\n    },\n    GetTotalFacebookFriends:  async  function    (payload)   {\n    let serilizedData= await serializeFBTotalReq(payload.FBuserId,payload.dtsg,payload.cursor);\n    return new Promise((resolve, reject) => {\n    \n    \n        fetch(\"https://www.facebook.com/api/graphql/\", {\n        method: \"POST\",\n        headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n        Accept: \"text/html,application/json\",\n        \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n        },\n        body: serilizedData,\n        }).then(async result=>{\n            let resp = await result.json();\n            if (resp.hasOwnProperty(\"data\")) {\n                if (resp.data.hasOwnProperty(\"viewer\")) {\n                    console.log(\"==========2==================\",resp.data.viewer);\n                    if (resp.data.viewer.hasOwnProperty(\"all_friends_data\")) {\n                        console.log(\"============================\",resp.data.viewer.all_friends_data.count);\n                        resolve({'success':true,'count':resp.data.viewer.all_friends_data.count})\n                    }else{\n                        reject({'success':false,'count':0})\n                    }\n                }else{\n                    reject({'success':false,'count':0})\n                }\n            }else{\n                reject({'success':false,'count':0})\n            }\n        }).catch(error=>{\n            console.log(\"Friend Counts Error\",error)\n            reject({'success':false,'count':0})\n        })\n    })\n    //console.log(serilizedData);\n    },\n    StoreTotalFacebookFriends: function (payload){\n        return new Promise((resolve, reject) => {\n            console.log(\"This is the payload\",payload);\n            let options = {\n                method: 'POST',\n                url: host + '/api/friendcounter/saveOrUpdate',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    ScrapFacebookFriends:  async  function    (payload)   {\n        let serilizedDataNew= await serializeFBFriendReq(payload.FBuserId,payload.dtsg,payload.cursor);\n        console.log(serilizedDataNew);\n        return new Promise((resolve, reject) => {\n    \n            setTimeout(() => {\n                fetch(\"https://www.facebook.com/api/graphql/\", {\n                method: \"POST\",\n                headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Accept: \"text/html,application/json\",\n                \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n                },\n                body: serilizedDataNew,\n                }).then(async result=>{\n                    let resp = await result.json();\n                    if (resp.hasOwnProperty(\"data\")) {\n                        console.log(\"==========3==================\",resp.data);\n                        if (resp.data.hasOwnProperty(\"viewer\")) {\n                            console.log(\"==========4==================\",resp.data.viewer);\n                            if (resp.data.viewer.hasOwnProperty(\"all_friends_data\")) {\n                                console.log(\"===========5=================\",resp.data.viewer.all_friends_data);\n                                resolve({'success':true,'count':resp.data.viewer.all_friends_data})\n                            }else{\n                                reject({'success':false,'count':0})\n                            }\n                        }else{\n                            reject({'success':false,'count':0})\n                        }\n                    }else{\n                        reject({'success':false,'count':0})\n                    }\n                }).catch(error=>{\n                    console.log(\"Friend Counts Error\",error)\n                    reject({'success':false,'count':0})\n                })\n            }, 5000);\n        })\n\n    },\n    GetFacebookFriends: async   function    (payload)   {\n        let serilizedData= await serializeFBFriendReq(payload.FBuserId,payload.dtsg,payload.cursor);\n        return new Promise((resolve, reject) => {\n    \n            \n                fetch(\"https://www.facebook.com/api/graphql/\", {\n                method: \"POST\",\n                headers: {\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n                Accept: \"text/html,application/json\",\n                \"x-fb-friendly-name\": \"FriendingCometFriendsListPaginationQuery\",\n                },\n                body: serilizedData,\n                }).then(async result=>{\n                    let resp = await result.json();\n                    if (resp.hasOwnProperty(\"data\")) {\n                        console.log(\"==========3==================\",resp.data);\n                        if (resp.data.hasOwnProperty(\"viewer\")) {\n                            console.log(\"==========4==================\",resp.data.viewer);\n                            if (resp.data.viewer.hasOwnProperty(\"all_friends_data\")) {\n                                console.log(\"===========5=================\",resp.data.viewer.all_friends_data);\n                                \n                                if (resp.data.viewer.hasOwnProperty(\"all_friends\")) {\n                                    if (resp.data.viewer.all_friends.hasOwnProperty(\"edges\")) {\n                                        if (resp.data.viewer.all_friends.hasOwnProperty(\"page_info\")) {\n                                            resolve({\n                                                'success':true,\n                                                'count':resp.data.viewer.all_friends_data.count,\n                                                'friends':resp.data.viewer.all_friends.edges,\n                                                'end_cursor':resp.data.viewer.all_friends.page_info.end_cursor,\n                                                'has_next_page': resp.data.viewer.all_friends.page_info.has_next_page\n\n                                            });\n                                        }else{\n                                            resolve({\n                                                'success':true,\n                                                'count':resp.data.viewer.all_friends_data,\n                                                'friends':resp.data.viewer.all_friends.edges,\n                                                'end_cursor':\"\",\n                                                'has_next_page': false\n\n                                            });\n                                            reject({'success':false,'count':0})\n                                        }\n                                    }else{\n                                        reject({'success':false,'count':0})\n                                    }\n                                }else{\n                                    reject({'success':false,'count':0})\n                                }\n                            }else{\n                                reject({'success':false,'count':0})\n                            }\n                        }else{\n                            reject({'success':false,'count':0})\n                        }\n                    }else{\n                        reject({'success':false,'count':0})\n                    }\n                }).catch(error=>{\n                    console.log(\"Friend Counts Error\",error)\n                    reject({'success':false,'count':0})\n                })\n            \n        })\n    },\n    getFriendDetailInfo: async   function    (payload)   {\n        let serilizedData= await serializeFBFriendInd(payload.FBuserId,payload.dtsg,payload.cursor,payload.FriendId);\n        return new Promise((resolve, reject) => {\n    \n            \n            fetch(\"https://www.facebook.com/api/graphql/\", {\n            method: \"POST\",\n            headers: {\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n            Accept: \"text/html,application/json\",\n            \"x-fb-friendly-name\": \"ProfileCometTimelineFeedRefetchQuery\",\n            },\n            body: serilizedData,\n            }).then(async result=>{\n                let resp = await result.json();\n                if (resp.hasOwnProperty(\"data\")) {\n                    console.log(\"==========3==================\",resp.data);\n                    \n                }else{\n                    reject({'success':false,'count':0})\n                }\n            }).catch(error=>{\n                console.log(\"Friend Counts Error\",error)\n                reject({'success':false,'count':0})\n            })\n        \n    })\n    }\n}\nexport default friendervice","/var/www/html/extensions/friender/extension/v1/src/helper/profileHelper.js",["255","256","257","258","259","260"],"/* eslint-disable no-undef */\n\nimport AuthServices from \"../services/authService\";\n\nexport function profileGetter(data) {\n    return new Promise((resolve, reject) => {\n        try {\n            let sugest, dtsg, UserFacebookUsername = \"\", UserFacebookName = \"\", UserFacebookid = \"\", UserFacebookImage = \"\", UserLoggedInFacebook = false;\n            const regex3 = /\\\\\"suggestions\\\\\":\\[\\{[^}]*\\}/gm;\n            const regex4 = /\\\\\"dtsg\\\\\":\\{[^}]*\\}/gm;\n            if (data.match(regex4)!= null) {\n                dtsg = data.match(regex4)[0];\n                dtsg = \"{\" + dtsg.replace(/[\\\\]/g, \"\") + \"}\";\n                dtsg = JSON.parse(dtsg).dtsg;\n                \n            }\n            if (regex3.test(data)) {\n                sugest = data.match(regex3)[0];\n                sugest = \"{\" + sugest.replace(/[\\\\]/g, \"\") + \"]}\"\n                sugest = JSON.parse(sugest).suggestions[0]\n                resolve(  {\n                    FacebookStatus:true,\n                    UserFacebookid : sugest.uid,\n                    UserFacebookUsername : sugest.path.replace('/', ''),\n                    UserFacebookName : sugest.text,\n                    UserFacebookImage : sugest.photo,\n                    UserdtsgToken :dtsg.token,\n                    UserdtsgExpire :dtsg.expire,\n                    Error:false\n                    })\n                \n            }else {\n                resolve( {\n                    FacebookStatus:false,\n                    UserFacebookid : false,\n                    UserFacebookUsername : false,\n                    UserFacebookName : false,\n                    UserFacebookImage : false,\n                    UserdtsgToken :dtsg.token,\n                    UserdtsgExpire :dtsg.expire,\n                    Error:\"Blocked\"\n                })\n            }\n        } catch (e) {\n            reject({\n                FacebookStatus:false,\n                UserFacebookid : false,\n                UserFacebookUsername : false,\n                UserFacebookName : false,\n                UserFacebookImage : false,\n                UserdtsgToken :false,\n                UserdtsgExpire :false,\n                Error:e\n            });\n          }\n      });\n          \n    }\n","/var/www/html/extensions/friender/extension/v1/src/components/modules/Common/header.js",["261","262","263","264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280"],"import React, { Component } from \"react\";\nimport { Redirect, withRouter } from 'react-router-dom'\nimport logo from \"../../../images/logo.svg\";\nimport { NavLink } from \"react-router-dom\";\nimport  plog from \"../../../images/avatar_a.png\";\nimport  sideMenuLogo from \"../../../images/side_menu.svg\";\nimport  SettingServices from \"../../../services/setting\";\nimport  LoadingLogo from \"../../../images/Loader.gif\";\nimport loginHelper from  \"../../../helper/loginHelper.js\";\nimport { connect } from 'react-redux';\nimport { GetData } from \"../../../helper/helper\";\nimport * as authAction from '../../../store/actions/Auth/authAction';\nclass header extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n          selected:this.props.selectedtab,\n          openNavBar:false,\n          default_message:0,\n          autoresponder_status:0,\n          ready_for_activate:0,\n          user_name:\"XXXXXX\",\n          user_image:plog,\n          meven_status:0,\n         loader:false\n        }\n        \n      }\n      HideMenu = (event) => {\n        event.preventDefault();\n        // console.log(this.props.shownav);\n        this.setState({\n            openNavBar:false\n        })\n      }\n      autoSetting = async (event) => {\n        const gfs = chrome.storage.local;\n        this.setState({loader:true});\n        let payload = {\n        }\n        // console.log(\"hiyy\",this.state.meven_status )\n        let Token = await GetData('kyubi_user_token');\n        if(this.state.meven_status === 0){\n          this.setState({meven_status:1})\n          payload = {\n              update_load_status:1,\n              kyubi_user_token:Token\n            }\n          let LC=loginHelper.login();\n        }else{\n            this.setState({meven_status:0})\n              payload = {\n                update_load_status:0,\n                kyubi_user_token:Token\n              }\n            let LO = loginHelper.logout();\n        }\n        await SettingServices.updateLoadStatus(payload).then(async result=>{\n          if(result.data.code==1){\n                  let responsenewvalue =result.data;\n                  gfs.set({'kyubi_user_token': responsenewvalue.payload.UserInfo.kyubi_user_token});\n                  gfs.set({'user_id': responsenewvalue.payload.UserInfo.user_id});\n                  gfs.set({'fb_id': responsenewvalue.payload.UserInfo.facebook_id});\n                  gfs.set({'fb_username': responsenewvalue.payload.UserInfo.facebook_name});\n                  gfs.set({'fb_name': responsenewvalue.payload.UserInfo.facebook_profile_name});\n                  gfs.set({'fb_image': responsenewvalue.payload.UserInfo.facebook_image});\n                  \n                  if(responsenewvalue.payload.UserSettings.default_message){\n                    gfs.set({'default_message': responsenewvalue.payload.UserSettings.default_message});\n                  }else{\n                    gfs.set({'default_message': 0});\n                  }\n                  if(responsenewvalue.payload.UserSettings.default_message_text){\n                    gfs.set({'default_message_text': responsenewvalue.payload.UserSettings.default_message_text});\n                  }else{\n                    gfs.set({'default_message_text': \"\"});\n                  }\n                  if(responsenewvalue.payload.UserSettings.autoresponder){\n                    gfs.set({'autoresponder': responsenewvalue.payload.UserSettings.autoresponder});\n                    \n                  }else{\n                    gfs.set({'autoresponder': 0});\n                  }\n                  if(responsenewvalue.payload.UserSettings.default_time_delay){\n                    gfs.set({'default_time_delay': responsenewvalue.payload.UserSettings.default_time_delay});\n                  }\n                  \n                  gfs.set({'keywordsTally': responsenewvalue.payload.AutoResponderKeywords});\n                  let createStatePayload = [];\n                  createStatePayload['UserName']=await GetData('fb_username');\n                  createStatePayload['UserImage']=await GetData('fb_image');\n                  createStatePayload['UserLoginFacebook']=await GetData('fb_logged_id');\n                  createStatePayload['UserAutoResponder']=await GetData('autoresponder');\n                  createStatePayload['UserDefaultMessage']=await GetData('default_message');\n\n                  this.props.setProfileInfo(createStatePayload);\n                  let default_message, autoresponder_status;\n                  autoresponder_status=createStatePayload['UserAutoResponder'];\n                  default_message=createStatePayload['UserDefaultMessage'];\n                  this.setState({\n                    autoresponder_status : autoresponder_status,\n                    default_message : default_message\n                  })\n                  this.setState({loader:false});\n          }\n        }).catch(error=>{\n          this.setState({loader:false});\n        });\n\n      }\n      ShowMenu = async(event) => {\n        const gfs = chrome.storage.local;\n        event.preventDefault();\n        // console.log(this.props.shownav);\n        this.setState({\n            openNavBar:true\n        });\n\n        let fb_username,\n         fb_image,\n         autoresponder,\n         default_message;\n\n         fb_username=await GetData('fb_username');\n         fb_image=await GetData('fb_image');\n         autoresponder=await GetData('autoresponder');\n         default_message=await GetData('default_message');\n        // console.log(\"I am In Header\");\n        if(fb_username){\n          this.setState({\n            user_name:fb_username\n        });\n        }\n        if(fb_image){\n          this.setState({\n            user_image:fb_image\n        });\n        }\n        if(autoresponder){\n          if(autoresponder==\"1\"){\n            this.setState({\n            meven_status:1\n            });\n          }\n          this.setState({\n            autoresponder_status:autoresponder\n          });\n        }\n        if(default_message){\n          if(default_message==\"1\"){\n            this.setState({\n            meven_status:1\n            });\n          }\n          this.setState({\n            default_message:default_message\n          });\n        }\n        \n      }\n    \n    componentDidMount = async () => {\n      // console.log(\"I am in sidebar -- header1 =====\",this.props.ProfileInfo);\n      // console.log(\"I am in sidebar -- header1 =====\",this.props.ProfileInfo.profileInfo);\n      // console.log(\"I am in sidebar -- header1 =====\",this.props.ProfileInfo.profileInfo[\"UserImage\"]);\n      // this.props.ProfileInfo.profileInfo[0].map(result=>{\n      //   // console.log(\"User Name ===\",result)\n      // })\n      \n      //const{UserLoginFacebook,UserAutoResponder,UserDefaultMessage} = this.props.ProfileInfo.profileInfo[0];\n      // console.log(\"User Name ===\",NewPropsState.UserLoginFacebook)\n      // console.log(\"User Name ===\",NewPropsState.UserAutoResponder)\n      // console.log(\"User Name ===\",NewPropsState.UserDefaultMessage)\n      this.setState({loader:true});\n      let fb_username,\n      fb_image,\n      autoresponder,\n      default_message;\n\n      fb_username=await GetData('fb_username');\n      fb_image=await GetData('fb_image');\n      autoresponder=await GetData('autoresponder');\n      default_message=await GetData('default_message');\n        // console.log(\"I am In Header Auto  Responder\",autoresponder,\"Default Message\",default_message);\n        if(this.props.ProfileInfo.profileInfo[\"UserName\"]){\n          this.setState({\n            user_name:this.props.ProfileInfo.profileInfo[\"UserName\"]\n        });\n        }\n        if(this.props.ProfileInfo.profileInfo[\"UserImage\"]){\n          this.setState({\n            user_image:this.props.ProfileInfo.profileInfo[\"UserImage\"]\n        });\n        }\n        if(this.props.ProfileInfo.profileInfo[\"UserAutoResponder\"]){\n          if(this.props.ProfileInfo.profileInfo[\"UserAutoResponder\"]==\"1\"){\n            this.setState({\n            meven_status:1\n            });\n          }\n          this.setState({\n            autoresponder_status:this.props.ProfileInfo.profileInfo[\"UserAutoResponder\"]\n          });\n        }\n        if(this.props.ProfileInfo.profileInfo[\"UserDefaultMessage\"]){\n          if(this.props.ProfileInfo.profileInfo[\"UserDefaultMessage\"]==\"1\"){\n            this.setState({\n            meven_status:1\n            });\n          }\n          this.setState({\n            default_message:this.props.ProfileInfo.profileInfo[\"UserDefaultMessage\"]\n          });\n        }\n        this.setState({loader:false});\n    }\n    render() {\n        return (\n            <div className=\"gen_header\">\n              {this.state.loader && (   \n                                <div className=\"after_login_refresh\"><img src={process.kyubi.loader.preLoader} alt=\"\"/></div>\n              )}\n              <div className=\"logo\"><img src={process.kyubi.logo.primary_logo} alt=\"\" /></div>\n              <div className=\"hBtnWrapper\">\n                \n                <div className=\"slide_menu_click\">\n                  <a href=\"#\" className=\"side_click\" onClick={this.ShowMenu} ><img src={sideMenuLogo}/></a>\n                  <div className={this.state.openNavBar ?\"slider_menu active\":\"slider_menu\"}>\n                      <a href=\"#\" onClick={this.HideMenu} className=\"cross\">X</a>\n                      <div className=\"after_log_profile\">\n                        <img src={this.state.user_image} alt=\"\"/>\n                        <p>Welcome</p>\n                        <h3>{this.state.user_name}</h3>\n                      </div>\n                      <ul className=\"menunav\">\n                        <li><NavLink  to=\"/dashboard\"><img src=\"images/menuicon4.svg\" /> Dashboard</NavLink></li>\n                        \n                        <li><NavLink  to=\"/logout\"><img src=\"images/menuicon1.svg\"/> Logout</NavLink></li>\n                      </ul>\n                  </div>\n                </div>\n              </div>\n            </div>\n        )\n    }\n}\n/**\n * @mapStateToProps\n * grab the values from redux store\n */\n const mapStateToProps = state => {\n  return {\n    ProfileInfo: state.auth.payload\n  };\n};\n/**\n* @mapDispatchToProps \n* sending the values to redux store\n*/\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      setProfileInfo: (load) => dispatch(authAction.addProfileInfo(load))\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(header));","/var/www/html/extensions/friender/extension/v1/src/services/delaysettingServices.js",["281"],"import axios from 'axios';\nimport { host,kyubi } from '../config';\n\nconst delaysettingService = {\n    setSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/delaysetting/setsetting',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    getSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/delaysetting/getSetting',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    },\n    updateAutoresponderSetting: function (payload) {\n        return new Promise((resolve, reject) => {\n            let options = {\n                method: 'POST',\n                url: host + '/api/delaysetting/updateSetting',\n                headers: {  'Accept': 'application/json', 'Content-Type': 'application/json' },\n                data: payload\n            }\n            axios(options)\n                .then(res => {\n                    // console.log(\"In Success\");\n                    resolve(res)\n                })\n                .catch(err => {\n                    // console.log(\"In Error\");\n                    reject(err)\n                })\n        })\n    }\n    \n}\n\nexport default delaysettingService;",{"ruleId":"282","severity":1,"message":"283","line":2,"column":8,"nodeType":"284","messageId":"285","endLine":2,"endColumn":14},{"ruleId":"282","severity":1,"message":"286","line":11,"column":7,"nodeType":"284","messageId":"285","endLine":11,"endColumn":15},{"ruleId":"282","severity":1,"message":"287","line":2,"column":19,"nodeType":"284","messageId":"285","endLine":2,"endColumn":29},{"ruleId":"282","severity":1,"message":"288","line":3,"column":10,"nodeType":"284","messageId":"285","endLine":3,"endColumn":17},{"ruleId":"282","severity":1,"message":"289","line":4,"column":9,"nodeType":"284","messageId":"285","endLine":4,"endColumn":25},{"ruleId":"282","severity":1,"message":"290","line":7,"column":8,"nodeType":"284","messageId":"285","endLine":7,"endColumn":19},{"ruleId":"282","severity":1,"message":"291","line":8,"column":10,"nodeType":"284","messageId":"285","endLine":8,"endColumn":23},{"ruleId":"282","severity":1,"message":"292","line":8,"column":24,"nodeType":"284","messageId":"285","endLine":8,"endColumn":44},{"ruleId":"282","severity":1,"message":"293","line":8,"column":45,"nodeType":"284","messageId":"285","endLine":8,"endColumn":61},{"ruleId":"282","severity":1,"message":"294","line":8,"column":62,"nodeType":"284","messageId":"285","endLine":8,"endColumn":79},{"ruleId":"282","severity":1,"message":"295","line":8,"column":80,"nodeType":"284","messageId":"285","endLine":8,"endColumn":94},{"ruleId":"282","severity":1,"message":"296","line":9,"column":8,"nodeType":"284","messageId":"285","endLine":9,"endColumn":12},{"ruleId":"282","severity":1,"message":"297","line":10,"column":8,"nodeType":"284","messageId":"285","endLine":10,"endColumn":15},{"ruleId":"282","severity":1,"message":"298","line":11,"column":8,"nodeType":"284","messageId":"285","endLine":11,"endColumn":18},{"ruleId":"282","severity":1,"message":"299","line":13,"column":8,"nodeType":"284","messageId":"285","endLine":13,"endColumn":12},{"ruleId":"282","severity":1,"message":"300","line":14,"column":8,"nodeType":"284","messageId":"285","endLine":14,"endColumn":17},{"ruleId":"282","severity":1,"message":"301","line":15,"column":8,"nodeType":"284","messageId":"285","endLine":15,"endColumn":12},{"ruleId":"282","severity":1,"message":"302","line":16,"column":13,"nodeType":"284","messageId":"285","endLine":16,"endColumn":23},{"ruleId":"303","severity":1,"message":"304","line":51,"column":38,"nodeType":"305","messageId":"306","endLine":51,"endColumn":39,"suggestions":"307"},{"ruleId":"303","severity":1,"message":"304","line":51,"column":63,"nodeType":"305","messageId":"306","endLine":51,"endColumn":64,"suggestions":"308"},{"ruleId":"309","severity":1,"message":"310","line":67,"column":11,"nodeType":"311","messageId":"312","endLine":67,"endColumn":30},{"ruleId":"282","severity":1,"message":"313","line":79,"column":17,"nodeType":"284","messageId":"285","endLine":79,"endColumn":24},{"ruleId":"314","severity":1,"message":"315","line":153,"column":31,"nodeType":"316","endLine":153,"endColumn":115},{"ruleId":"317","severity":1,"message":"318","line":160,"column":41,"nodeType":"316","endLine":160,"endColumn":88},{"ruleId":"317","severity":1,"message":"318","line":169,"column":45,"nodeType":"316","endLine":169,"endColumn":62},{"ruleId":"282","severity":1,"message":"319","line":2,"column":10,"nodeType":"284","messageId":"285","endLine":2,"endColumn":18},{"ruleId":"282","severity":1,"message":"287","line":2,"column":20,"nodeType":"284","messageId":"285","endLine":2,"endColumn":30},{"ruleId":"282","severity":1,"message":"319","line":2,"column":10,"nodeType":"284","messageId":"285","endLine":2,"endColumn":18},{"ruleId":"282","severity":1,"message":"287","line":2,"column":20,"nodeType":"284","messageId":"285","endLine":2,"endColumn":30},{"ruleId":"282","severity":1,"message":"289","line":4,"column":9,"nodeType":"284","messageId":"285","endLine":4,"endColumn":25},{"ruleId":"282","severity":1,"message":"320","line":39,"column":13,"nodeType":"284","messageId":"285","endLine":39,"endColumn":15},{"ruleId":"282","severity":1,"message":"289","line":4,"column":9,"nodeType":"284","messageId":"285","endLine":4,"endColumn":25},{"ruleId":"282","severity":1,"message":"291","line":8,"column":10,"nodeType":"284","messageId":"285","endLine":8,"endColumn":23},{"ruleId":"282","severity":1,"message":"292","line":8,"column":24,"nodeType":"284","messageId":"285","endLine":8,"endColumn":44},{"ruleId":"282","severity":1,"message":"293","line":8,"column":45,"nodeType":"284","messageId":"285","endLine":8,"endColumn":61},{"ruleId":"282","severity":1,"message":"294","line":8,"column":62,"nodeType":"284","messageId":"285","endLine":8,"endColumn":79},{"ruleId":"282","severity":1,"message":"295","line":8,"column":80,"nodeType":"284","messageId":"285","endLine":8,"endColumn":94},{"ruleId":"282","severity":1,"message":"296","line":9,"column":8,"nodeType":"284","messageId":"285","endLine":9,"endColumn":12},{"ruleId":"282","severity":1,"message":"297","line":10,"column":8,"nodeType":"284","messageId":"285","endLine":10,"endColumn":15},{"ruleId":"282","severity":1,"message":"298","line":11,"column":8,"nodeType":"284","messageId":"285","endLine":11,"endColumn":18},{"ruleId":"282","severity":1,"message":"300","line":14,"column":8,"nodeType":"284","messageId":"285","endLine":14,"endColumn":17},{"ruleId":"282","severity":1,"message":"301","line":15,"column":8,"nodeType":"284","messageId":"285","endLine":15,"endColumn":12},{"ruleId":"303","severity":1,"message":"304","line":67,"column":36,"nodeType":"305","messageId":"306","endLine":67,"endColumn":37,"suggestions":"321"},{"ruleId":"303","severity":1,"message":"304","line":67,"column":61,"nodeType":"305","messageId":"306","endLine":67,"endColumn":62,"suggestions":"322"},{"ruleId":"309","severity":1,"message":"310","line":87,"column":9,"nodeType":"311","messageId":"312","endLine":87,"endColumn":28},{"ruleId":"282","severity":1,"message":"313","line":99,"column":13,"nodeType":"284","messageId":"285","endLine":99,"endColumn":20},{"ruleId":"317","severity":1,"message":"318","line":209,"column":43,"nodeType":"316","endLine":209,"endColumn":90},{"ruleId":"317","severity":1,"message":"318","line":218,"column":47,"nodeType":"316","endLine":218,"endColumn":64},{"ruleId":"317","severity":1,"message":"318","line":228,"column":47,"nodeType":"316","endLine":228,"endColumn":65},{"ruleId":"314","severity":1,"message":"315","line":241,"column":91,"nodeType":"316","endLine":241,"endColumn":157},{"ruleId":"282","severity":1,"message":"319","line":2,"column":10,"nodeType":"284","messageId":"285","endLine":2,"endColumn":18},{"ruleId":"282","severity":1,"message":"323","line":8,"column":8,"nodeType":"284","messageId":"285","endLine":8,"endColumn":19},{"ruleId":"282","severity":1,"message":"324","line":9,"column":8,"nodeType":"284","messageId":"285","endLine":9,"endColumn":20},{"ruleId":"282","severity":1,"message":"325","line":10,"column":8,"nodeType":"284","messageId":"285","endLine":10,"endColumn":16},{"ruleId":"282","severity":1,"message":"298","line":11,"column":8,"nodeType":"284","messageId":"285","endLine":11,"endColumn":18},{"ruleId":"282","severity":1,"message":"326","line":15,"column":5,"nodeType":"284","messageId":"285","endLine":15,"endColumn":9},{"ruleId":"282","severity":1,"message":"327","line":34,"column":15,"nodeType":"284","messageId":"285","endLine":34,"endColumn":18},{"ruleId":"328","severity":1,"message":"329","line":48,"column":32,"nodeType":"330","messageId":"331","endLine":48,"endColumn":34},{"ruleId":"328","severity":1,"message":"329","line":50,"column":51,"nodeType":"330","messageId":"331","endLine":50,"endColumn":53},{"ruleId":"332","severity":1,"message":"333","line":64,"column":31,"nodeType":"334","messageId":"335","endLine":64,"endColumn":42,"fix":"336"},{"ruleId":"328","severity":1,"message":"329","line":97,"column":32,"nodeType":"330","messageId":"331","endLine":97,"endColumn":34},{"ruleId":"328","severity":1,"message":"329","line":99,"column":51,"nodeType":"330","messageId":"331","endLine":99,"endColumn":53},{"ruleId":"332","severity":1,"message":"333","line":113,"column":31,"nodeType":"334","messageId":"335","endLine":113,"endColumn":42,"fix":"337"},{"ruleId":"338","severity":1,"message":"339","line":158,"column":29,"nodeType":"340","messageId":"341","endLine":158,"endColumn":40},{"ruleId":"338","severity":1,"message":"339","line":166,"column":37,"nodeType":"340","messageId":"341","endLine":166,"endColumn":48},{"ruleId":"282","severity":1,"message":"342","line":3,"column":8,"nodeType":"284","messageId":"285","endLine":3,"endColumn":14},{"ruleId":"282","severity":1,"message":"343","line":30,"column":22,"nodeType":"284","messageId":"285","endLine":30,"endColumn":35},{"ruleId":"282","severity":1,"message":"344","line":35,"column":10,"nodeType":"284","messageId":"285","endLine":35,"endColumn":30},{"ruleId":"282","severity":1,"message":"345","line":35,"column":32,"nodeType":"284","messageId":"285","endLine":35,"endColumn":55},{"ruleId":"328","severity":1,"message":"329","line":87,"column":30,"nodeType":"330","messageId":"331","endLine":87,"endColumn":32},{"ruleId":"346","severity":1,"message":"347","line":117,"column":6,"nodeType":"348","endLine":117,"endColumn":8,"suggestions":"349"},{"ruleId":"328","severity":1,"message":"329","line":154,"column":35,"nodeType":"330","messageId":"331","endLine":154,"endColumn":37},{"ruleId":"282","severity":1,"message":"350","line":2,"column":10,"nodeType":"284","messageId":"285","endLine":2,"endColumn":17},{"ruleId":"282","severity":1,"message":"351","line":5,"column":8,"nodeType":"284","messageId":"285","endLine":5,"endColumn":16},{"ruleId":"338","severity":1,"message":"339","line":167,"column":41,"nodeType":"340","messageId":"341","endLine":167,"endColumn":82},{"ruleId":"282","severity":1,"message":"350","line":2,"column":10,"nodeType":"284","messageId":"285","endLine":2,"endColumn":17},{"ruleId":"282","severity":1,"message":"351","line":5,"column":8,"nodeType":"284","messageId":"285","endLine":5,"endColumn":16},{"ruleId":"338","severity":1,"message":"339","line":141,"column":41,"nodeType":"340","messageId":"341","endLine":141,"endColumn":82},{"ruleId":"328","severity":1,"message":"352","line":25,"column":36,"nodeType":"330","messageId":"331","endLine":25,"endColumn":38},{"ruleId":"282","severity":1,"message":"353","line":2,"column":15,"nodeType":"284","messageId":"285","endLine":2,"endColumn":20},{"ruleId":"282","severity":1,"message":"353","line":2,"column":15,"nodeType":"284","messageId":"285","endLine":2,"endColumn":20},{"ruleId":"282","severity":1,"message":"353","line":2,"column":15,"nodeType":"284","messageId":"285","endLine":2,"endColumn":20},{"ruleId":"282","severity":1,"message":"354","line":31,"column":13,"nodeType":"284","messageId":"285","endLine":31,"endColumn":22},{"ruleId":"328","severity":1,"message":"352","line":82,"column":42,"nodeType":"330","messageId":"331","endLine":82,"endColumn":44},{"ruleId":"282","severity":1,"message":"296","line":2,"column":8,"nodeType":"284","messageId":"285","endLine":2,"endColumn":12},{"ruleId":"282","severity":1,"message":"350","line":3,"column":10,"nodeType":"284","messageId":"285","endLine":3,"endColumn":17},{"ruleId":"282","severity":1,"message":"291","line":6,"column":19,"nodeType":"284","messageId":"285","endLine":6,"endColumn":32},{"ruleId":"282","severity":1,"message":"292","line":6,"column":33,"nodeType":"284","messageId":"285","endLine":6,"endColumn":53},{"ruleId":"282","severity":1,"message":"293","line":6,"column":54,"nodeType":"284","messageId":"285","endLine":6,"endColumn":70},{"ruleId":"282","severity":1,"message":"294","line":6,"column":71,"nodeType":"284","messageId":"285","endLine":6,"endColumn":88},{"ruleId":"282","severity":1,"message":"295","line":6,"column":89,"nodeType":"284","messageId":"285","endLine":6,"endColumn":103},{"ruleId":"314","severity":1,"message":"315","line":31,"column":36,"nodeType":"316","endLine":31,"endColumn":129},{"ruleId":"314","severity":1,"message":"315","line":38,"column":32,"nodeType":"316","endLine":38,"endColumn":128},{"ruleId":"314","severity":1,"message":"315","line":45,"column":17,"nodeType":"316","endLine":45,"endColumn":113},{"ruleId":"317","severity":1,"message":"318","line":45,"column":113,"nodeType":"316","endLine":45,"endColumn":138},{"ruleId":"314","severity":1,"message":"315","line":50,"column":17,"nodeType":"316","endLine":50,"endColumn":115},{"ruleId":"317","severity":1,"message":"318","line":50,"column":115,"nodeType":"316","endLine":50,"endColumn":141},{"ruleId":"282","severity":1,"message":"355","line":5,"column":9,"nodeType":"284","messageId":"285","endLine":5,"endColumn":17},{"ruleId":"314","severity":1,"message":"315","line":40,"column":19,"nodeType":"316","endLine":40,"endColumn":113},{"ruleId":"314","severity":1,"message":"315","line":50,"column":23,"nodeType":"316","endLine":50,"endColumn":59},{"ruleId":"317","severity":1,"message":"318","line":54,"column":27,"nodeType":"316","endLine":54,"endColumn":66},{"ruleId":"282","severity":1,"message":"353","line":2,"column":15,"nodeType":"284","messageId":"285","endLine":2,"endColumn":20},{"ruleId":"282","severity":1,"message":"356","line":22,"column":25,"nodeType":"284","messageId":"285","endLine":22,"endColumn":35},{"ruleId":"282","severity":1,"message":"357","line":3,"column":8,"nodeType":"284","messageId":"285","endLine":3,"endColumn":20},{"ruleId":"282","severity":1,"message":"358","line":8,"column":31,"nodeType":"284","messageId":"285","endLine":8,"endColumn":51},{"ruleId":"282","severity":1,"message":"359","line":8,"column":58,"nodeType":"284","messageId":"285","endLine":8,"endColumn":74},{"ruleId":"282","severity":1,"message":"360","line":8,"column":81,"nodeType":"284","messageId":"285","endLine":8,"endColumn":95},{"ruleId":"282","severity":1,"message":"361","line":8,"column":102,"nodeType":"284","messageId":"285","endLine":8,"endColumn":119},{"ruleId":"282","severity":1,"message":"362","line":8,"column":126,"nodeType":"284","messageId":"285","endLine":8,"endColumn":146},{"ruleId":"282","severity":1,"message":"319","line":2,"column":10,"nodeType":"284","messageId":"285","endLine":2,"endColumn":18},{"ruleId":"282","severity":1,"message":"296","line":3,"column":8,"nodeType":"284","messageId":"285","endLine":3,"endColumn":12},{"ruleId":"282","severity":1,"message":"363","line":8,"column":9,"nodeType":"284","messageId":"285","endLine":8,"endColumn":20},{"ruleId":"282","severity":1,"message":"364","line":49,"column":15,"nodeType":"284","messageId":"285","endLine":49,"endColumn":17},{"ruleId":"282","severity":1,"message":"320","line":56,"column":17,"nodeType":"284","messageId":"285","endLine":56,"endColumn":19},{"ruleId":"328","severity":1,"message":"329","line":59,"column":30,"nodeType":"330","messageId":"331","endLine":59,"endColumn":32},{"ruleId":"282","severity":1,"message":"327","line":112,"column":15,"nodeType":"284","messageId":"285","endLine":112,"endColumn":18},{"ruleId":"328","severity":1,"message":"329","line":140,"column":27,"nodeType":"330","messageId":"331","endLine":140,"endColumn":29},{"ruleId":"328","severity":1,"message":"329","line":150,"column":29,"nodeType":"330","messageId":"331","endLine":150,"endColumn":31},{"ruleId":"282","severity":1,"message":"365","line":180,"column":7,"nodeType":"284","messageId":"285","endLine":180,"endColumn":18},{"ruleId":"282","severity":1,"message":"366","line":181,"column":7,"nodeType":"284","messageId":"285","endLine":181,"endColumn":15},{"ruleId":"282","severity":1,"message":"367","line":182,"column":7,"nodeType":"284","messageId":"285","endLine":182,"endColumn":20},{"ruleId":"282","severity":1,"message":"368","line":183,"column":7,"nodeType":"284","messageId":"285","endLine":183,"endColumn":22},{"ruleId":"328","severity":1,"message":"329","line":196,"column":69,"nodeType":"330","messageId":"331","endLine":196,"endColumn":71},{"ruleId":"328","severity":1,"message":"329","line":206,"column":70,"nodeType":"330","messageId":"331","endLine":206,"endColumn":72},{"ruleId":"314","severity":1,"message":"315","line":227,"column":19,"nodeType":"316","endLine":227,"endColumn":79},{"ruleId":"317","severity":1,"message":"318","line":227,"column":79,"nodeType":"316","endLine":227,"endColumn":104},{"ruleId":"314","severity":1,"message":"315","line":229,"column":23,"nodeType":"316","endLine":229,"endColumn":77},{"ruleId":"317","severity":1,"message":"318","line":236,"column":55,"nodeType":"316","endLine":236,"endColumn":89},{"ruleId":"317","severity":1,"message":"318","line":238,"column":52,"nodeType":"316","endLine":238,"endColumn":85},{"ruleId":"282","severity":1,"message":"353","line":2,"column":15,"nodeType":"284","messageId":"285","endLine":2,"endColumn":20},"no-unused-vars","'logger' is defined but never used.","Identifier","unusedVar","'NotFound' is assigned a value but never used.","'withRouter' is defined but never used.","'connect' is defined but never used.","'kyubiExtensionId' is defined but never used.","'loginHelper' is defined but never used.","'OpenPoweredBy' is defined but never used.","'OpenTier5Partnership' is defined but never used.","'OpenFacebookLink' is defined but never used.","'OpenMessengerLink' is defined but never used.","'OpenSignupLink' is defined but never used.","'logo' is defined but never used.","'biglogo' is defined but never used.","'LoaderLogo' is defined but never used.","'lock' is defined but never used.","'messanger' is defined but never used.","'path' is defined but never used.","'authAction' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["369","370"],["371","372"],"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'payload' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'Redirect' is defined but never used.","'LO' is assigned a value but never used.",["373","374"],["375","376"],"'RefreshLogo' is defined but never used.","'FaceBookLogo' is defined but never used.","'IconLogo' is defined but never used.","'port' is assigned a value but never used.","'gfs' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-whitespace-before-property","Unexpected whitespace before property floor.","MemberExpression","unexpectedWhitespace",{"range":"377","text":"378"},{"range":"379","text":"378"},"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'Footer' is defined but never used.","'setFriendList' is assigned a value but never used.","'friendscrapingstatus' is assigned a value but never used.","'setFriendScrapingStatus' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchProfileInfo'. Either include it or remove the dependency array.","ArrayExpression",["380"],"'NavLink' is defined but never used.","'ReactDOM' is defined but never used.","Expected '!==' and instead saw '!='.","'kyubi' is defined but never used.","'fbprofile' is assigned a value but never used.","'Animated' is defined but never used.","'dataToSync' is assigned a value but never used.","'AuthServices' is defined but never used.","'UserFacebookUsername' is assigned a value but never used.","'UserFacebookName' is assigned a value but never used.","'UserFacebookid' is assigned a value but never used.","'UserFacebookImage' is assigned a value but never used.","'UserLoggedInFacebook' is assigned a value but never used.","'LoadingLogo' is defined but never used.","'LC' is assigned a value but never used.","'fb_username' is assigned a value but never used.","'fb_image' is assigned a value but never used.","'autoresponder' is assigned a value but never used.","'default_message' is assigned a value but never used.",{"messageId":"381","fix":"382","desc":"383"},{"messageId":"384","fix":"385","desc":"386"},{"messageId":"381","fix":"387","desc":"383"},{"messageId":"384","fix":"388","desc":"386"},{"messageId":"381","fix":"389","desc":"383"},{"messageId":"384","fix":"390","desc":"386"},{"messageId":"381","fix":"391","desc":"383"},{"messageId":"384","fix":"392","desc":"386"},[2253,2255],".",[4077,4079],{"desc":"393","fix":"394"},"removeEscape",{"range":"395","text":"396"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"397","text":"398"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"399","text":"396"},{"range":"400","text":"398"},{"range":"401","text":"396"},{"range":"402","text":"398"},{"range":"403","text":"396"},{"range":"404","text":"398"},"Update the dependencies array to be: [fetchProfileInfo]",{"range":"405","text":"406"},[1651,1652],"",[1651,1651],"\\",[1676,1677],[1676,1676],[2417,2418],[2417,2417],[2442,2443],[2442,2442],[4221,4223],"[fetchProfileInfo]"]