{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDnd = require('react-dnd');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _utils = require('./utils');\n\nvar _RemoveComponent = require('./RemoveComponent');\n\nvar _RemoveComponent2 = _interopRequireDefault(_RemoveComponent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar ItemTypes = {\n  TAG: 'tag'\n};\n\nvar Tag = function Tag(props) {\n  var tagRef = (0, _react.useRef)(null);\n  var readOnly = props.readOnly,\n      tag = props.tag,\n      classNames = props.classNames,\n      index = props.index;\n\n  var _useDrag = (0, _reactDnd.useDrag)(function () {\n    return {\n      type: ItemTypes.TAG,\n      collect: function collect(monitor) {\n        return {\n          isDragging: !!monitor.isDragging()\n        };\n      },\n      item: props,\n      canDrag: function canDrag() {\n        return (0, _utils.canDrag)(props);\n      }\n    };\n  }),\n      _useDrag2 = _slicedToArray(_useDrag, 2),\n      isDragging = _useDrag2[0].isDragging,\n      drag = _useDrag2[1];\n\n  var _useDrop = (0, _reactDnd.useDrop)(function () {\n    return {\n      accept: ItemTypes.TAG,\n      drop: function drop(item, monitor) {\n        var dragIndex = item.index;\n        var hoverIndex = index;\n\n        if (dragIndex === hoverIndex) {\n          return;\n        }\n\n        props.moveTag(dragIndex, hoverIndex);\n      },\n      canDrop: function canDrop(item) {\n        return (0, _utils.canDrop)(item);\n      }\n    };\n  }),\n      _useDrop2 = _slicedToArray(_useDrop, 2),\n      drop = _useDrop2[1];\n\n  drag(drop(tagRef));\n  var label = props.tag[props.labelField];\n  var _tag$className = tag.className,\n      className = _tag$className === undefined ? '' : _tag$className;\n  /* istanbul ignore next */\n\n  var opacity = isDragging ? 0 : 1;\n\n  var tagComponent = _react2.default.createElement('span', {\n    ref: tagRef,\n    className: (0, _classnames2.default)('tag-wrapper', classNames.tag, className),\n    style: {\n      opacity: opacity,\n      cursor: (0, _utils.canDrag)(props) ? 'move' : 'auto'\n    },\n    onClick: props.onTagClicked,\n    onTouchStart: props.onTagClicked\n  }, label, _react2.default.createElement(_RemoveComponent2.default, {\n    tag: props.tag,\n    className: classNames.remove,\n    removeComponent: props.removeComponent,\n    onRemove: props.onDelete,\n    readOnly: readOnly,\n    index: index\n  }));\n\n  return tagComponent;\n};\n\nTag.propTypes = {\n  labelField: _propTypes2.default.string,\n  onDelete: _propTypes2.default.func.isRequired,\n  tag: _propTypes2.default.shape({\n    id: _propTypes2.default.string.isRequired,\n    className: _propTypes2.default.string,\n    key: _propTypes2.default.string\n  }),\n  moveTag: _propTypes2.default.func,\n  removeComponent: _propTypes2.default.func,\n  onTagClicked: _propTypes2.default.func,\n  classNames: _propTypes2.default.object,\n  readOnly: _propTypes2.default.bool,\n  index: _propTypes2.default.number.isRequired\n};\nTag.defaultProps = {\n  labelField: 'text',\n  readOnly: false\n};\nexports.default = Tag;","map":null,"metadata":{},"sourceType":"script"}